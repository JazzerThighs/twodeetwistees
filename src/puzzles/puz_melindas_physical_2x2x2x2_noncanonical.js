function LRx(c) {
  return [
    [c[3][0], c[3][2], c[3][1], c[3][3]],
    [c[2][0], c[2][2], c[2][1], c[2][3]],
    [c[6][0], c[6][2], c[6][1], c[6][3]],
    [c[7][0], c[7][2], c[7][1], c[7][3]],
    [c[0][0], c[0][2], c[0][1], c[0][3]],
    [c[1][0], c[1][2], c[1][1], c[1][3]],
    [c[5][0], c[5][2], c[5][1], c[5][3]],
    [c[4][0], c[4][2], c[4][1], c[4][3]],
  ];
}
function LRy(c) {
  return [
    [c[3][0], c[3][1], c[3][3], c[3][2]],
    [c[0][0], c[0][1], c[0][3], c[0][2]],
    [c[1][0], c[1][1], c[1][3], c[1][2]],
    [c[2][0], c[2][1], c[2][3], c[2][2]],
    [c[7][0], c[7][1], c[7][3], c[7][2]],
    [c[4][0], c[4][1], c[4][3], c[4][2]],
    [c[5][0], c[5][1], c[5][3], c[5][2]],
    [c[6][0], c[6][1], c[6][3], c[6][2]],
  ];
}
function LRz(c) {
  return [
    [c[4][0], c[4][3], c[4][2], c[4][1]],
    [c[0][0], c[0][3], c[0][2], c[0][1]],
    [c[3][0], c[3][3], c[3][2], c[3][1]],
    [c[7][0], c[7][3], c[7][2], c[7][1]],
    [c[5][0], c[5][3], c[5][2], c[5][1]],
    [c[1][0], c[1][3], c[1][2], c[1][1]],
    [c[2][0], c[2][3], c[2][2], c[2][1]],
    [c[6][0], c[6][3], c[6][2], c[6][1]],
  ];
}
function LorRTurn(p, num) {
  if (num == 0) {
    return LRy(p);
  } else if (num == 1) {
    return LRy(LRy(LRy(p)));
  } else if (num == 2) {
    return LRy(LRy(p));
  } else if (num == 3) {
    return LRx(LRx(p));
  } else if (num == 4) {
    return LRz(LRz(p));
  } else if (num == 5) {
    return LRy(LRx(LRx(p)));
  } else if (num == 6) {
    return LRy(LRy(LRy(LRx(LRx(p)))));
  } else if (num == 7) {
    return LRx(p);
  } else if (num == 8) {
    return LRy(LRx(p));
  } else if (num == 9) {
    return LRy(LRy(LRy(LRx(p))));
  } else if (num == 10) {
    return LRy(LRy(LRx(p)));
  } else if (num == 11) {
    return LRx(LRx(LRx(p)));
  } else if (num == 12) {
    return LRy(LRx(LRx(LRx(p))));
  } else if (num == 13) {
    return LRy(LRy(LRy(LRx(LRx(LRx(p))))));
  } else if (num == 14) {
    return LRy(LRy(LRx(LRx(LRx(p)))));
  } else if (num == 15) {
    return LRz(p);
  } else if (num == 16) {
    return LRy(LRz(p));
  } else if (num == 17) {
    return LRy(LRy(LRy(LRz(p))));
  } else if (num == 18) {
    return LRy(LRy(LRz(p)));
  } else if (num == 19) {
    return LRz(LRz(LRz(p)));
  } else if (num == 20) {
    return LRy(LRz(LRz(LRz(p))));
  } else if (num == 21) {
    return LRy(LRy(LRy(LRz(LRz(LRz(p))))));
  } else if (num == 22) {
    return LRy(LRy(LRz(LRz(LRz(p)))));
  } else {
    return p;
  }
}
function hashtag(p) {
  return [
    [
      [p[1][3][3], p[1][3][2], p[1][3][1], p[1][3][0]],
      [p[0][2][3], p[0][2][2], p[0][2][1], p[0][2][0]],
      [p[0][1][3], p[0][1][2], p[0][1][1], p[0][1][0]],
      [p[1][0][3], p[1][0][2], p[1][0][1], p[1][0][0]],
      [p[0][5][3], p[0][5][2], p[0][5][1], p[0][5][0]],
      [p[1][4][3], p[1][4][2], p[1][4][1], p[1][4][0]],
      [p[1][7][3], p[1][7][2], p[1][7][1], p[1][7][0]],
      [p[0][6][3], p[0][6][2], p[0][6][1], p[0][6][0]],
    ],
    [
      [p[0][3][3], p[0][3][2], p[0][3][1], p[0][3][0]],
      [p[1][2][3], p[1][2][2], p[1][2][1], p[1][2][0]],
      [p[1][1][3], p[1][1][2], p[1][1][1], p[1][1][0]],
      [p[0][0][3], p[0][0][2], p[0][0][1], p[0][0][0]],
      [p[1][5][3], p[1][5][2], p[1][5][1], p[1][5][0]],
      [p[0][4][3], p[0][4][2], p[0][4][1], p[0][4][0]],
      [p[0][7][3], p[0][7][2], p[0][7][1], p[0][7][0]],
      [p[1][6][3], p[1][6][2], p[1][6][1], p[1][6][0]],
    ],
  ];
}
const move = {
  L_x: function (p) {
    return [
      [
        [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]],
        [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
        [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
        [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
        [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
        [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
        [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
        [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]]
      ],
      p[1]
    ];
  },
  L_y: function (p) {
    return [
      [
        [p[0][3][0], p[0][3][1], p[0][3][3], p[0][3][2]],
        [p[0][0][0], p[0][0][1], p[0][0][3], p[0][0][2]],
        [p[0][1][0], p[0][1][1], p[0][1][3], p[0][1][2]],
        [p[0][2][0], p[0][2][1], p[0][2][3], p[0][2][2]],
        [p[0][7][0], p[0][7][1], p[0][7][3], p[0][7][2]],
        [p[0][4][0], p[0][4][1], p[0][4][3], p[0][4][2]],
        [p[0][5][0], p[0][5][1], p[0][5][3], p[0][5][2]],
        [p[0][6][0], p[0][6][1], p[0][6][3], p[0][6][2]]
      ],
      p[1]
    ];
  },
  L_z: function (p) {
    return [
      [
        [p[0][4][0], p[0][4][3], p[0][4][2], p[0][4][1]],
        [p[0][0][0], p[0][0][3], p[0][0][2], p[0][0][1]],
        [p[0][3][0], p[0][3][3], p[0][3][2], p[0][3][1]],
        [p[0][7][0], p[0][7][3], p[0][7][2], p[0][7][1]],
        [p[0][5][0], p[0][5][3], p[0][5][2], p[0][5][1]],
        [p[0][1][0], p[0][1][3], p[0][1][2], p[0][1][1]],
        [p[0][2][0], p[0][2][3], p[0][2][2], p[0][2][1]],
        [p[0][6][0], p[0][6][3], p[0][6][2], p[0][6][1]]
      ],
      p[1]
    ];
  },
  R_x: function (p) {
    return [
      p[0],
      [
        [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]],
        [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
        [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
        [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
        [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
        [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
        [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
        [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]]
      ]
    ];
  },
  R_y: function (p) {
    return [
      p[0],
      [
        [p[1][3][0], p[1][3][1], p[1][3][3], p[1][3][2]],
        [p[1][0][0], p[1][0][1], p[1][0][3], p[1][0][2]],
        [p[1][1][0], p[1][1][1], p[1][1][3], p[1][1][2]],
        [p[1][2][0], p[1][2][1], p[1][2][3], p[1][2][2]],
        [p[1][7][0], p[1][7][1], p[1][7][3], p[1][7][2]],
        [p[1][4][0], p[1][4][1], p[1][4][3], p[1][4][2]],
        [p[1][5][0], p[1][5][1], p[1][5][3], p[1][5][2]],
        [p[1][6][0], p[1][6][1], p[1][6][3], p[1][6][2]]
      ]
    ];
  },
  R_z: function (p) {
    return [
      p[0],
      [
        [p[1][4][0], p[1][4][3], p[1][4][2], p[1][4][1]],
        [p[1][0][0], p[1][0][3], p[1][0][2], p[1][0][1]],
        [p[1][3][0], p[1][3][3], p[1][3][2], p[1][3][1]],
        [p[1][7][0], p[1][7][3], p[1][7][2], p[1][7][1]],
        [p[1][5][0], p[1][5][3], p[1][5][2], p[1][5][1]],
        [p[1][1][0], p[1][1][3], p[1][1][2], p[1][1][1]],
        [p[1][2][0], p[1][2][3], p[1][2][2], p[1][2][1]],
        [p[1][6][0], p[1][6][3], p[1][6][2], p[1][6][1]]
      ]
    ];
  },
  U_x: function (p) {
    return [
      [
        [p[0][3][0], p[0][3][1], p[0][3][3], p[0][3][2]],
        [p[0][0][0], p[0][0][1], p[0][0][3], p[0][0][2]],
        [p[0][1][0], p[0][1][1], p[0][1][3], p[0][1][2]],
        [p[0][2][0], p[0][2][1], p[0][2][3], p[0][2][2]],
        p[0][4],
        p[0][5],
        p[0][6],
        p[0][7]
      ],
      [
        [p[1][1][0], p[1][1][1], p[1][1][3], p[1][1][2]],
        [p[1][2][0], p[1][2][1], p[1][2][3], p[1][2][2]],
        [p[1][3][0], p[1][3][1], p[1][3][3], p[1][3][2]],
        [p[1][0][0], p[1][0][1], p[1][0][3], p[1][0][2]],
        p[1][4],
        p[1][5],
        p[1][6],
        p[1][7]
      ]
    ];
  },
  U_y: function (p) {
    return [
      [p[0][2], p[0][3], p[1][2], p[1][3], p[0][4], p[0][5], p[0][6], p[0][7]],
      [p[0][0], p[0][1], p[1][0], p[1][1], p[1][4], p[1][5], p[1][6], p[1][7]]
    ];
  },
  U_z: function (p) {
    return [
      [
        [p[0][1][3], p[0][1][1], p[0][1][2], p[0][1][0]],
        [p[1][0][3], p[1][0][1], p[1][0][2], p[1][0][0]],
        [p[1][3][3], p[1][3][1], p[1][3][2], p[1][3][0]],
        [p[0][2][3], p[0][2][1], p[0][2][2], p[0][2][0]],
        p[0][4],
        p[0][5],
        p[0][6],
        p[0][7]
      ],
      [
        [p[1][1][3], p[1][1][1], p[1][1][2], p[1][1][0]],
        [p[0][0][3], p[0][0][1], p[0][0][2], p[0][0][0]],
        [p[0][3][3], p[0][3][1], p[0][3][2], p[0][3][0]],
        [p[1][2][3], p[1][2][1], p[1][2][2], p[1][2][0]],
        p[1][4],
        p[1][5],
        p[1][6],
        p[1][7]
      ]
    ];
  },
  D_x: function (p) {
    return [
      [
        p[0][0],
        p[0][1],
        p[0][2],
        p[0][3],
        [p[0][7][0], p[0][7][1], p[0][7][3], p[0][7][2]],
        [p[0][4][0], p[0][4][1], p[0][4][3], p[0][4][2]],
        [p[0][5][0], p[0][5][1], p[0][5][3], p[0][5][2]],
        [p[0][6][0], p[0][6][1], p[0][6][3], p[0][6][2]]
      ],
      [
        p[1][0],
        p[1][1],
        p[1][2],
        p[1][3],
        [p[1][5][0], p[1][5][1], p[1][5][3], p[1][5][2]],
        [p[1][6][0], p[1][6][1], p[1][6][3], p[1][6][2]],
        [p[1][7][0], p[1][7][1], p[1][7][3], p[1][7][2]],
        [p[1][4][0], p[1][4][1], p[1][4][3], p[1][4][2]]
      ]
    ];
  },
  D_y: function (p) {
    return [
      [p[0][0], p[0][1], p[0][2], p[0][3], p[0][6], p[0][7], p[1][6], p[1][7]],
      [p[1][0], p[1][1], p[1][2], p[1][3], p[0][4], p[0][5], p[1][4], p[1][5]]
    ];
  },
  D_z: function (p) {
    return [
      [
        p[0][0],
        p[0][1],
        p[0][2],
        p[0][3],
        [p[0][5][3], p[0][5][1], p[0][5][2], p[0][5][0]],
        [p[1][4][3], p[1][4][1], p[1][4][2], p[1][4][0]],
        [p[1][7][3], p[1][7][1], p[1][7][2], p[1][7][0]],
        [p[0][6][3], p[0][6][1], p[0][6][2], p[0][6][0]]
      ],
      [
        p[1][0],
        p[1][1],
        p[1][2],
        p[1][3],
        [p[1][5][3], p[1][5][1], p[1][5][2], p[1][5][0]],
        [p[0][4][3], p[0][4][1], p[0][4][2], p[0][4][0]],
        [p[0][7][3], p[0][7][1], p[0][7][2], p[0][7][0]],
        [p[1][6][3], p[1][6][1], p[1][6][2], p[1][6][0]]
      ]
    ];
  },
  F_x: function (p) {
    return [
      [
        p[0][0],
        p[0][1],
        [p[0][3][0], p[0][3][3], p[0][3][2], p[0][3][1]],
        [p[0][7][0], p[0][7][3], p[0][7][2], p[0][7][1]],
        p[0][4],
        p[0][5],
        [p[0][2][0], p[0][2][3], p[0][2][2], p[0][2][1]],
        [p[0][6][0], p[0][6][3], p[0][6][2], p[0][6][1]]
      ],
      [
        p[1][0],
        p[1][1],
        [p[1][6][0], p[1][6][3], p[1][6][2], p[1][6][1]],
        [p[1][2][0], p[1][2][3], p[1][2][2], p[1][2][1]],
        p[1][4],
        p[1][5],
        [p[1][7][0], p[1][7][3], p[1][7][2], p[1][7][1]],
        [p[1][3][0], p[1][3][3], p[1][3][2], p[1][3][1]]
      ]
    ];
  },
  F_y: function (p) {
    return [
      [
        p[0][0],
        p[0][1],
        [p[0][3][3], p[0][3][1], p[0][3][2], p[0][3][0]],
        [p[1][2][3], p[1][2][1], p[1][2][2], p[1][2][0]],
        p[0][4],
        p[0][5],
        [p[0][7][3], p[0][7][1], p[0][7][2], p[0][7][0]],
        [p[1][6][3], p[1][6][1], p[1][6][2], p[1][6][0]]
      ],
      [
        p[1][0],
        p[1][1],
        [p[1][3][3], p[1][3][1], p[1][3][2], p[1][3][0]],
        [p[0][2][3], p[0][2][1], p[0][2][2], p[0][2][0]],
        p[1][4],
        p[1][5],
        [p[1][7][3], p[1][7][1], p[1][7][2], p[1][7][0]],
        [p[0][6][3], p[0][6][1], p[0][6][2], p[0][6][0]]
      ]
    ];
  },
  F_z: function (p) {
    return [
      [p[0][0], p[0][1], p[0][7], p[0][6], p[0][4], p[0][5], p[1][6], p[1][7]],
      [p[1][0], p[1][1], p[0][2], p[0][3], p[1][4], p[1][5], p[1][3], p[1][2]]
    ];
  },
  B_x: function (p) {
    return [
      [
        [p[0][1][0], p[0][1][3], p[0][1][2], p[0][1][1]],
        [p[0][5][0], p[0][5][3], p[0][5][2], p[0][5][1]],
        p[0][2],
        p[0][3],
        [p[0][0][0], p[0][0][3], p[0][0][2], p[0][0][1]],
        [p[0][4][0], p[0][4][3], p[0][4][2], p[0][4][1]],
        p[0][6],
        p[0][7]
      ],
      [
        [p[1][4][0], p[1][4][3], p[1][4][2], p[1][4][1]],
        [p[1][0][0], p[1][0][3], p[1][0][2], p[1][0][1]],
        p[1][2],
        p[1][3],
        [p[1][5][0], p[1][5][3], p[1][5][2], p[1][5][1]],
        [p[1][1][0], p[1][1][3], p[1][1][2], p[1][1][1]],
        p[1][6],
        p[1][7]
      ]
    ];
  },
  B_y: function (p) {
    return [
      [
        [p[0][1][3], p[0][1][1], p[0][1][2], p[0][1][0]],
        [p[1][0][3], p[1][0][1], p[1][0][2], p[1][0][0]],
        p[0][2],
        p[0][3],
        [p[0][5][3], p[0][5][1], p[0][5][2], p[0][5][0]],
        [p[1][4][3], p[1][4][1], p[1][4][2], p[1][4][0]],
        p[0][6],
        p[0][7]
      ],
      [
        [p[1][1][3], p[1][1][1], p[1][1][2], p[1][1][0]],
        [p[0][0][3], p[0][0][1], p[0][0][2], p[0][0][0]],
        p[1][2],
        p[1][3],
        [p[1][5][3], p[1][5][1], p[1][5][2], p[1][5][0]],
        [p[0][4][3], p[0][4][1], p[0][4][2], p[0][4][0]],
        p[1][6],
        p[1][7]
      ]
    ];
  },
  B_z: function (p) {
    return [
      [p[0][5], p[0][4], p[0][2], p[0][3], p[1][4], p[1][5], p[0][6], p[0][7]],
      [p[0][0], p[0][1], p[1][2], p[1][3], p[1][1], p[1][0], p[1][6], p[1][7]]
    ];
  },
  I_x: function (p) {
    return [
      [
        p[0][0],
        [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
        [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
        p[0][3],
        p[0][4],
        [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
        [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
        p[0][7]
      ],
      [
        [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]],
        p[1][1],
        p[1][2],
        [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
        [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
        p[1][5],
        p[1][6],
        [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]]
      ]
    ];
  },
  I_y: function (p) {
    return [
      [
        p[0][0],
        [p[0][2][2], p[0][2][1], p[0][2][0], p[0][2][3]],
        [p[1][3][2], p[1][3][1], p[1][3][0], p[1][3][3]],
        p[0][3],
        p[0][4],
        [p[0][6][2], p[0][6][1], p[0][6][0], p[0][6][3]],
        [p[1][7][2], p[1][7][1], p[1][7][0], p[1][7][3]],
        p[0][7]
      ],
      [
        [p[0][1][2], p[0][1][1], p[0][1][0], p[0][1][3]],
        p[1][1],
        p[1][2],
        [p[1][0][2], p[1][0][1], p[1][0][0], p[1][0][3]],
        [p[0][5][2], p[0][5][1], p[0][5][0], p[0][5][3]],
        p[1][5],
        p[1][6],
        [p[1][4][2], p[1][4][1], p[1][4][0], p[1][4][3]]
      ]
    ];
  },
  I_z: function (p) {
    return [
      [
        p[0][0],
        [p[0][5][1], p[0][5][0], p[0][5][2], p[0][5][3]],
        [p[0][6][1], p[0][6][0], p[0][6][2], p[0][6][3]],
        p[0][3],
        p[0][4],
        [p[1][4][1], p[1][4][0], p[1][4][2], p[1][4][3]],
        [p[1][7][1], p[1][7][0], p[1][7][2], p[1][7][3]],
        p[0][7]
      ],
      [
        [p[0][1][1], p[0][1][0], p[0][1][2], p[0][1][3]],
        p[1][1],
        p[1][2],
        [p[0][2][1], p[0][2][0], p[0][2][2], p[0][2][3]],
        [p[1][0][1], p[1][0][0], p[1][0][2], p[1][0][3]],
        p[1][5],
        p[1][6],
        [p[1][3][1], p[1][3][0], p[1][3][2], p[1][3][3]]
      ]
    ];
  },
  O_x: function (p) {
    return [
      [
        [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]],
        p[0][1],
        p[0][2],
        [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
        [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
        p[0][5],
        p[0][6],
        [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]]
      ],
      [
        p[1][0],
        [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
        [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
        p[1][3],
        p[1][4],
        [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
        [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
        p[1][7]
      ]
    ];
  },
  O_y: function (p) {
    return [
      [
        [p[0][3][2], p[0][3][1], p[0][3][0], p[0][3][3]],
        p[0][1],
        p[0][2],
        [p[1][2][2], p[1][2][1], p[1][2][0], p[1][2][3]],
        [p[0][7][2], p[0][7][1], p[0][7][0], p[0][7][3]],
        p[0][5],
        p[0][6],
        [p[1][6][2], p[1][6][1], p[1][6][0], p[1][6][3]]
      ],
      [
        p[1][0],
        [p[0][0][2], p[0][0][1], p[0][0][0], p[0][0][3]],
        [p[1][1][2], p[1][1][1], p[1][1][0], p[1][1][3]],
        p[1][3],
        p[1][4],
        [p[0][4][2], p[0][4][1], p[0][4][0], p[0][4][3]],
        [p[1][5][2], p[1][5][1], p[1][5][0], p[1][5][3]],
        p[1][7]
      ]
    ];
  },
  O_z: function (p) {
    return [
      [
        [p[0][4][1], p[0][4][0], p[0][4][2], p[0][4][3]],
        p[0][1],
        p[0][2],
        [p[0][7][1], p[0][7][0], p[0][7][2], p[0][7][3]],
        [p[1][5][1], p[1][5][0], p[1][5][2], p[1][5][3]],
        p[0][5],
        p[0][6],
        [p[1][6][1], p[1][6][0], p[1][6][2], p[1][6][3]]
      ],
      [
        p[1][0],
        [p[0][0][1], p[0][0][0], p[0][0][2], p[0][0][3]],
        [p[0][3][1], p[0][3][0], p[0][3][2], p[0][3][3]],
        p[1][3],
        p[1][4],
        [p[1][1][1], p[1][1][0], p[1][1][2], p[1][1][3]],
        [p[1][2][1], p[1][2][0], p[1][2][2], p[1][2][3]],
        p[1][7]
      ]
    ];
  },
  L_x_prime: function (p) {
    return [
      [
        [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]],
        [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
        [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
        [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
        [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
        [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
        [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
        [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]]
      ],
      p[1]
    ];
  },
  L_y_prime: function (p) {
    return [
      [
        [p[0][1][0], p[0][1][1], p[0][1][3], p[0][1][2]],
        [p[0][2][0], p[0][2][1], p[0][2][3], p[0][2][2]],
        [p[0][3][0], p[0][3][1], p[0][3][3], p[0][3][2]],
        [p[0][0][0], p[0][0][1], p[0][0][3], p[0][0][2]],
        [p[0][5][0], p[0][5][1], p[0][5][3], p[0][5][2]],
        [p[0][6][0], p[0][6][1], p[0][6][3], p[0][6][2]],
        [p[0][7][0], p[0][7][1], p[0][7][3], p[0][7][2]],
        [p[0][4][0], p[0][4][1], p[0][4][3], p[0][4][2]]
      ],
      p[1]
    ];
  },
  L_z_prime: function (p) {
    return [
      [
        [p[0][1][0], p[0][1][3], p[0][1][2], p[0][1][1]],
        [p[0][5][0], p[0][5][3], p[0][5][2], p[0][5][1]],
        [p[0][6][0], p[0][6][3], p[0][6][2], p[0][6][1]],
        [p[0][2][0], p[0][2][3], p[0][2][2], p[0][2][1]],
        [p[0][0][0], p[0][0][3], p[0][0][2], p[0][0][1]],
        [p[0][4][0], p[0][4][3], p[0][4][2], p[0][4][1]],
        [p[0][7][0], p[0][7][3], p[0][7][2], p[0][7][1]],
        [p[0][3][0], p[0][3][3], p[0][3][2], p[0][3][1]]
      ],
      p[1]
    ];
  },
  R_x_prime: function (p) {
    return [
      p[0],
      [
        [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]],
        [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
        [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
        [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
        [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
        [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
        [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
        [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]]
      ]
    ];
  },
  R_y_prime: function (p) {
    return [
      p[0],
      [
        [p[1][1][0], p[1][1][1], p[1][1][3], p[1][1][2]],
        [p[1][2][0], p[1][2][1], p[1][2][3], p[1][2][2]],
        [p[1][3][0], p[1][3][1], p[1][3][3], p[1][3][2]],
        [p[1][0][0], p[1][0][1], p[1][0][3], p[1][0][2]],
        [p[1][5][0], p[1][5][1], p[1][5][3], p[1][5][2]],
        [p[1][6][0], p[1][6][1], p[1][6][3], p[1][6][2]],
        [p[1][7][0], p[1][7][1], p[1][7][3], p[1][7][2]],
        [p[1][4][0], p[1][4][1], p[1][4][3], p[1][4][2]]
      ]
    ];
  },
  R_z_prime: function (p) {
    return [
      p[0],
      [
        [p[1][1][0], p[1][1][3], p[1][1][2], p[1][1][1]],
        [p[1][5][0], p[1][5][3], p[1][5][2], p[1][5][1]],
        [p[1][6][0], p[1][6][3], p[1][6][2], p[1][6][1]],
        [p[1][2][0], p[1][2][3], p[1][2][2], p[1][2][1]],
        [p[1][0][0], p[1][0][3], p[1][0][2], p[1][0][1]],
        [p[1][4][0], p[1][4][3], p[1][4][2], p[1][4][1]],
        [p[1][7][0], p[1][7][3], p[1][7][2], p[1][7][1]],
        [p[1][3][0], p[1][3][3], p[1][3][2], p[1][3][1]]
      ]
    ];
  },
  U_x_prime: function (p) {
    return [
      [
        [p[0][1][0], p[0][1][1], p[0][1][3], p[0][1][2]],
        [p[0][2][0], p[0][2][1], p[0][2][3], p[0][2][2]],
        [p[0][3][0], p[0][3][1], p[0][3][3], p[0][3][2]],
        [p[0][0][0], p[0][0][1], p[0][0][3], p[0][0][2]],
        p[0][4],
        p[0][5],
        p[0][6],
        p[0][7]
      ],
      [
        [p[1][3][0], p[1][3][1], p[1][3][3], p[1][3][2]],
        [p[1][0][0], p[1][0][1], p[1][0][3], p[1][0][2]],
        [p[1][1][0], p[1][1][1], p[1][1][3], p[1][1][2]],
        [p[1][2][0], p[1][2][1], p[1][2][3], p[1][2][2]],
        p[1][4],
        p[1][5],
        p[1][6],
        p[1][7]
      ]
    ];
  },
  U_y_prime: function (p) {
    return [
      [p[1][0], p[1][1], p[0][0], p[0][1], p[0][4], p[0][5], p[0][6], p[0][7]],
      [p[1][2], p[1][3], p[0][2], p[0][3], p[1][4], p[1][5], p[1][6], p[1][7]]
    ];
  },
  U_z_prime: function (p) {
    return [
      [
        [p[1][1][3], p[1][1][1], p[1][1][2], p[1][1][0]],
        [p[0][0][3], p[0][0][1], p[0][0][2], p[0][0][0]],
        [p[0][3][3], p[0][3][1], p[0][3][2], p[0][3][0]],
        [p[1][2][3], p[1][2][1], p[1][2][2], p[1][2][0]],
        p[0][4],
        p[0][5],
        p[0][6],
        p[0][7]
      ],
      [
        [p[0][1][3], p[0][1][1], p[0][1][2], p[0][1][0]],
        [p[1][0][3], p[1][0][1], p[1][0][2], p[1][0][0]],
        [p[1][3][3], p[1][3][1], p[1][3][2], p[1][3][0]],
        [p[0][2][3], p[0][2][1], p[0][2][2], p[0][2][0]],
        p[1][4],
        p[1][5],
        p[1][6],
        p[1][7]
      ]
    ];
  },
  D_x_prime: function (p) {
    return [
      [
        p[0][0],
        p[0][1],
        p[0][2],
        p[0][3],
        [p[0][5][0], p[0][5][1], p[0][5][3], p[0][5][2]],
        [p[0][6][0], p[0][6][1], p[0][6][3], p[0][6][2]],
        [p[0][7][0], p[0][7][1], p[0][7][3], p[0][7][2]],
        [p[0][4][0], p[0][4][1], p[0][4][3], p[0][4][2]]
      ],
      [
        p[1][0],
        p[1][1],
        p[1][2],
        p[1][3],
        [p[1][7][0], p[1][7][1], p[1][7][3], p[1][7][2]],
        [p[1][4][0], p[1][4][1], p[1][4][3], p[1][4][2]],
        [p[1][5][0], p[1][5][1], p[1][5][3], p[1][5][2]],
        [p[1][6][0], p[1][6][1], p[1][6][3], p[1][6][2]]
      ]
    ];
  },
  D_y_prime: function (p) {
    return [
      [p[0][0], p[0][1], p[0][2], p[0][3], p[1][4], p[1][5], p[0][4], p[0][5]],
      [p[1][0], p[1][1], p[1][2], p[1][3], p[1][6], p[1][7], p[0][6], p[0][7]]
    ];
  },
  D_z_prime: function (p) {
    return [
      [
        p[0][0],
        p[0][1],
        p[0][2],
        p[0][3],
        [p[1][5][3], p[1][5][1], p[1][5][2], p[1][5][0]],
        [p[0][4][3], p[0][4][1], p[0][4][2], p[0][4][0]],
        [p[0][7][3], p[0][7][1], p[0][7][2], p[0][7][0]],
        [p[1][6][3], p[1][6][1], p[1][6][2], p[1][6][0]]
      ],
      [
        p[1][0],
        p[1][1],
        p[1][2],
        p[1][3],
        [p[0][5][3], p[0][5][1], p[0][5][2], p[0][5][0]],
        [p[1][4][3], p[1][4][1], p[1][4][2], p[1][4][0]],
        [p[1][7][3], p[1][7][1], p[1][7][2], p[1][7][0]],
        [p[0][6][3], p[0][6][1], p[0][6][2], p[0][6][0]]
      ]
    ];
  },
  F_x_prime: function (p) {
    return [
      [
        p[0][0],
        p[0][1],
        [p[0][6][0], p[0][6][3], p[0][6][2], p[0][6][1]],
        [p[0][2][0], p[0][2][3], p[0][2][2], p[0][2][1]],
        p[0][4],
        p[0][5],
        [p[0][7][0], p[0][7][3], p[0][7][2], p[0][7][1]],
        [p[0][3][0], p[0][3][3], p[0][3][2], p[0][3][1]]
      ],
      [
        p[1][0],
        p[1][1],
        [p[1][3][0], p[1][3][3], p[1][3][2], p[1][3][1]],
        [p[1][7][0], p[1][7][3], p[1][7][2], p[1][7][1]],
        p[1][4],
        p[1][5],
        [p[1][2][0], p[1][2][3], p[1][2][2], p[1][2][1]],
        [p[1][6][0], p[1][6][3], p[1][6][2], p[1][6][1]]
      ]
    ];
  },
  F_y_prime: function (p) {
    return [
      [
        p[0][0],
        p[0][1],
        [p[1][3][3], p[1][3][1], p[1][3][2], p[1][3][0]],
        [p[0][2][3], p[0][2][1], p[0][2][2], p[0][2][0]],
        p[0][4],
        p[0][5],
        [p[1][7][3], p[1][7][1], p[1][7][2], p[1][7][0]],
        [p[0][6][3], p[0][6][1], p[0][6][2], p[0][6][0]]
      ],
      [
        p[1][0],
        p[1][1],
        [p[0][3][3], p[0][3][1], p[0][3][2], p[0][3][0]],
        [p[1][2][3], p[1][2][1], p[1][2][2], p[1][2][0]],
        p[1][4],
        p[1][5],
        [p[0][7][3], p[0][7][1], p[0][7][2], p[0][7][0]],
        [p[1][6][3], p[1][6][1], p[1][6][2], p[1][6][0]]
      ]
    ];
  },
  F_z_prime: function (p) {
    return [
      [p[0][0], p[0][1], p[1][2], p[1][3], p[0][4], p[0][5], p[0][3], p[0][2]],
      [p[1][0], p[1][1], p[1][7], p[1][6], p[1][4], p[1][5], p[0][6], p[0][7]]
    ];
  },
  B_x_prime: function (p) {
    return [
      [
        [p[0][4][0], p[0][4][3], p[0][4][2], p[0][4][1]],
        [p[0][0][0], p[0][0][3], p[0][0][2], p[0][0][1]],
        p[0][2],
        p[0][3],
        [p[0][5][0], p[0][5][3], p[0][5][2], p[0][5][1]],
        [p[0][1][0], p[0][1][3], p[0][1][2], p[0][1][1]],
        p[0][6],
        p[0][7]
      ],
      [
        [p[1][1][0], p[1][1][3], p[1][1][2], p[1][1][1]],
        [p[1][5][0], p[1][5][3], p[1][5][2], p[1][5][1]],
        p[1][2],
        p[1][3],
        [p[1][0][0], p[1][0][3], p[1][0][2], p[1][0][1]],
        [p[1][4][0], p[1][4][3], p[1][4][2], p[1][4][1]],
        p[1][6],
        p[1][7]
      ]
    ];
  },
  B_y_prime: function (p) {
    return [
      [
        [p[1][1][3], p[1][1][1], p[1][1][2], p[1][1][0]],
        [p[0][0][3], p[0][0][1], p[0][0][2], p[0][0][0]],
        p[0][2],
        p[0][3],
        [p[1][5][3], p[1][5][1], p[1][5][2], p[1][5][0]],
        [p[0][4][3], p[0][4][1], p[0][4][2], p[0][4][0]],
        p[0][6],
        p[0][7]
      ],
      [
        [p[0][1][3], p[0][1][1], p[0][1][2], p[0][1][0]],
        [p[1][0][3], p[1][0][1], p[1][0][2], p[1][0][0]],
        p[1][2],
        p[1][3],
        [p[0][5][3], p[0][5][1], p[0][5][2], p[0][5][0]],
        [p[1][4][3], p[1][4][1], p[1][4][2], p[1][4][0]],
        p[1][6],
        p[1][7]
      ]
    ];
  },
  B_z_prime: function (p) {
    return [
      [p[1][0], p[1][1], p[0][2], p[0][3], p[0][1], p[0][0], p[0][6], p[0][7]],
      [p[1][5], p[1][4], p[1][2], p[1][3], p[0][4], p[0][5], p[1][6], p[1][7]]
    ];
  },
  I_x_prime: function (p) {
    return [
      [
        p[0][0],
        [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
        [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
        p[0][3],
        p[0][4],
        [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
        [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
        p[0][7]
      ],
      [
        [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]],
        p[1][1],
        p[1][2],
        [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
        [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
        p[1][5],
        p[1][6],
        [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]]
      ]
    ];
  },
  I_y_prime: function (p) {
    return [
      [
        p[0][0],
        [p[1][0][2], p[1][0][1], p[1][0][0], p[1][0][3]],
        [p[0][1][2], p[0][1][1], p[0][1][0], p[0][1][3]],
        p[0][3],
        p[0][4],
        [p[1][4][2], p[1][4][1], p[1][4][0], p[1][4][3]],
        [p[0][5][2], p[0][5][1], p[0][5][0], p[0][5][3]],
        p[0][7]
      ],
      [
        [p[1][3][2], p[1][3][1], p[1][3][0], p[1][3][3]],
        p[1][1],
        p[1][2],
        [p[0][2][2], p[0][2][1], p[0][2][0], p[0][2][3]],
        [p[1][7][2], p[1][7][1], p[1][7][0], p[1][7][3]],
        p[1][5],
        p[1][6],
        [p[0][6][2], p[0][6][1], p[0][6][0], p[0][6][3]]
      ]
    ];
  },
  I_z_prime: function (p) {
    return [
      [
        p[0][0],
        [p[1][0][1], p[1][0][0], p[1][0][2], p[1][0][3]],
        [p[1][3][1], p[1][3][0], p[1][3][2], p[1][3][3]],
        p[0][3],
        p[0][4],
        [p[0][1][1], p[0][1][0], p[0][1][2], p[0][1][3]],
        [p[0][2][1], p[0][2][0], p[0][2][2], p[0][2][3]],
        p[0][7]
      ],
      [
        [p[1][4][1], p[1][4][0], p[1][4][2], p[1][4][3]],
        p[1][1],
        p[1][2],
        [p[1][7][1], p[1][7][0], p[1][7][2], p[1][7][3]],
        [p[0][5][1], p[0][5][0], p[0][5][2], p[0][5][3]],
        p[1][5],
        p[1][6],
        [p[0][6][1], p[0][6][0], p[0][6][2], p[0][6][3]]
      ]
    ];
  },
  O_x_prime: function (p) {
    return [
      [
        [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]],
        p[0][1],
        p[0][2],
        [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
        [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
        p[0][5],
        p[0][6],
        [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]]
      ],
      [
        p[1][0],
        [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
        [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
        p[1][3],
        p[1][4],
        [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
        [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
        p[1][7]
      ]
    ];
  },
  O_y_prime: function (p) {
    return [
      [
        [p[1][1][2], p[1][1][1], p[1][1][0], p[1][1][3]],
        p[0][1],
        p[0][2],
        [p[0][0][2], p[0][0][1], p[0][0][0], p[0][0][3]],
        [p[1][5][2], p[1][5][1], p[1][5][0], p[1][5][3]],
        p[0][5],
        p[0][6],
        [p[0][4][2], p[0][4][1], p[0][4][0], p[0][4][3]]
      ],
      [
        p[1][0],
        [p[1][2][2], p[1][2][1], p[1][2][0], p[1][2][3]],
        [p[0][3][2], p[0][3][1], p[0][3][0], p[0][3][3]],
        p[1][3],
        p[1][4],
        [p[1][6][2], p[1][6][1], p[1][6][0], p[1][6][3]],
        [p[0][7][2], p[0][7][1], p[0][7][0], p[0][7][3]],
        p[1][7]
      ]
    ];
  },
  O_z_prime: function (p) {
    return [
      [
        [p[1][1][1], p[1][1][0], p[1][1][2], p[1][1][3]],
        p[0][1],
        p[0][2],
        [p[1][2][1], p[1][2][0], p[1][2][2], p[1][2][3]],
        [p[0][0][1], p[0][0][0], p[0][0][2], p[0][0][3]],
        p[0][5],
        p[0][6],
        [p[0][3][1], p[0][3][0], p[0][3][2], p[0][3][3]]
      ],
      [
        p[1][0],
        [p[1][5][1], p[1][5][0], p[1][5][2], p[1][5][3]],
        [p[1][6][1], p[1][6][0], p[1][6][2], p[1][6][3]],
        p[1][3],
        p[1][4],
        [p[0][4][1], p[0][4][0], p[0][4][2], p[0][4][3]],
        [p[0][7][1], p[0][7][0], p[0][7][2], p[0][7][3]],
        p[1][7]
      ]
    ];
  },
  gyro_x: function (p) {
    return [
      [
        [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]],
        [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
        [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
        [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
        [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
        [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
        [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
        [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]]
      ],
      [
        [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]],
        [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
        [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
        [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
        [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
        [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
        [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
        [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]]
      ]
    ];
  },
  gyro_x_prime: function (p) {
    return [
      [
        [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]],
        [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
        [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
        [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
        [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
        [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
        [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
        [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]]
      ],
      [
        [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]],
        [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
        [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
        [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
        [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
        [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
        [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
        [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]]
      ]
    ];
  },
  gyro_y: function (p) {
    return [
      [
        [p[0][3][2], p[0][3][1], p[0][3][0], p[0][3][3]],
        [p[0][2][2], p[0][2][1], p[0][2][0], p[0][2][3]],
        [p[1][3][2], p[1][3][1], p[1][3][0], p[1][3][3]],
        [p[1][2][2], p[1][2][1], p[1][2][0], p[1][2][3]],
        [p[0][7][2], p[0][7][1], p[0][7][0], p[0][7][3]],
        [p[0][6][2], p[0][6][1], p[0][6][0], p[0][6][3]],
        [p[1][7][2], p[1][7][1], p[1][7][0], p[1][7][3]],
        [p[1][6][2], p[1][6][1], p[1][6][0], p[1][6][3]]
      ],
      [
        [p[0][1][2], p[0][1][1], p[0][1][0], p[0][1][3]],
        [p[0][0][2], p[0][0][1], p[0][0][0], p[0][0][3]],
        [p[1][1][2], p[1][1][1], p[1][1][0], p[1][1][3]],
        [p[1][0][2], p[1][0][1], p[1][0][0], p[1][0][3]],
        [p[0][5][2], p[0][5][1], p[0][5][0], p[0][5][3]],
        [p[0][4][2], p[0][4][1], p[0][4][0], p[0][4][3]],
        [p[1][5][2], p[1][5][1], p[1][5][0], p[1][5][3]],
        [p[1][4][2], p[1][4][1], p[1][4][0], p[1][4][3]]
      ]
    ];
  },
  gyro_y_prime: function (p) {
    return [
      [
        [p[1][1][2], p[1][1][1], p[1][1][0], p[1][1][3]],
        [p[1][0][2], p[1][0][1], p[1][0][0], p[1][0][3]],
        [p[0][1][2], p[0][1][1], p[0][1][0], p[0][1][3]],
        [p[0][0][2], p[0][0][1], p[0][0][0], p[0][0][3]],
        [p[1][5][2], p[1][5][1], p[1][5][0], p[1][5][3]],
        [p[1][4][2], p[1][4][1], p[1][4][0], p[1][4][3]],
        [p[0][5][2], p[0][5][1], p[0][5][0], p[0][5][3]],
        [p[0][4][2], p[0][4][1], p[0][4][0], p[0][4][3]]
      ],
      [
        [p[1][3][2], p[1][3][1], p[1][3][0], p[1][3][3]],
        [p[1][2][2], p[1][2][1], p[1][2][0], p[1][2][3]],
        [p[0][3][2], p[0][3][1], p[0][3][0], p[0][3][3]],
        [p[0][2][2], p[0][2][1], p[0][2][0], p[0][2][3]],
        [p[1][7][2], p[1][7][1], p[1][7][0], p[1][7][3]],
        [p[1][6][2], p[1][6][1], p[1][6][0], p[1][6][3]],
        [p[0][7][2], p[0][7][1], p[0][7][0], p[0][7][3]],
        [p[0][6][2], p[0][6][1], p[0][6][0], p[0][6][3]]
      ]
    ];
  },
  gyro_z: function (p) {
    return [
      [
        [p[0][4][1], p[0][4][0], p[0][4][2], p[0][4][3]],
        [p[0][5][1], p[0][5][0], p[0][5][2], p[0][5][3]],
        [p[0][6][1], p[0][6][0], p[0][6][2], p[0][6][3]],
        [p[0][7][1], p[0][7][0], p[0][7][2], p[0][7][3]],
        [p[1][5][1], p[1][5][0], p[1][5][2], p[1][5][3]],
        [p[1][4][1], p[1][4][0], p[1][4][2], p[1][4][3]],
        [p[1][7][1], p[1][7][0], p[1][7][2], p[1][7][3]],
        [p[1][6][1], p[1][6][0], p[1][6][2], p[1][6][3]]
      ],
      [
        [p[0][1][1], p[0][1][0], p[0][1][2], p[0][1][3]],
        [p[0][0][1], p[0][0][0], p[0][0][2], p[0][0][3]],
        [p[0][3][1], p[0][3][0], p[0][3][2], p[0][3][3]],
        [p[0][2][1], p[0][2][0], p[0][2][2], p[0][2][3]],
        [p[1][0][1], p[1][0][0], p[1][0][2], p[1][0][3]],
        [p[1][1][1], p[1][1][0], p[1][1][2], p[1][1][3]],
        [p[1][2][1], p[1][2][0], p[1][2][2], p[1][2][3]],
        [p[1][3][1], p[1][3][0], p[1][3][2], p[1][3][3]]
      ]
    ];
  },
  gyro_z_prime: function (p) {
    return [
      [
        [p[1][1][1], p[1][1][0], p[1][1][2], p[1][1][3]],
        [p[1][0][1], p[1][0][0], p[1][0][2], p[1][0][3]],
        [p[1][3][1], p[1][3][0], p[1][3][2], p[1][3][3]],
        [p[1][2][1], p[1][2][0], p[1][2][2], p[1][2][3]],
        [p[0][0][1], p[0][0][0], p[0][0][2], p[0][0][3]],
        [p[0][1][1], p[0][1][0], p[0][1][2], p[0][1][3]],
        [p[0][2][1], p[0][2][0], p[0][2][2], p[0][2][3]],
        [p[0][3][1], p[0][3][0], p[0][3][2], p[0][3][3]]
      ],
      [
        [p[1][4][1], p[1][4][0], p[1][4][2], p[1][4][3]],
        [p[1][5][1], p[1][5][0], p[1][5][2], p[1][5][3]],
        [p[1][6][1], p[1][6][0], p[1][6][2], p[1][6][3]],
        [p[1][7][1], p[1][7][0], p[1][7][2], p[1][7][3]],
        [p[0][5][1], p[0][5][0], p[0][5][2], p[0][5][3]],
        [p[0][4][1], p[0][4][0], p[0][4][2], p[0][4][3]],
        [p[0][7][1], p[0][7][0], p[0][7][2], p[0][7][3]],
        [p[0][6][1], p[0][6][0], p[0][6][2], p[0][6][3]]
      ]
    ];
  }
};
let cellgripkeys = [
  // HyperSpeedCube 2^4 Cell Grip Bindings (Non-canonical Moves for Melinda's Physical 2^4 Hypercube):
  ['KeyW', 'L_', false], // Grip L Cell
  ['KeyE', 'U_', false], // Grip U Cell
  ['KeyR', 'B_', false], // Grip B Cell
  ['KeyS', 'F_', false], // Grip F Cell
  ['KeyD', 'I_', false], // Grip I Cell
  ['KeyF', 'R_', false], // Grip R Cell
  ['KeyC', 'D_', false], // Grip D Cell
  ['KeyV', 'O_', false], // Grip O Cell
  ['KeyX', 'gyro_', false], // Grip Gyro (Rotate Projection) // Gyros Y/Y' and Z/Z' are the "Physical 2x2x2x2 Gyro Algorithm"
];
const movekeys = [
  // HyperSpeedCube 2^4 Cell 3D Rotation Bindings (Non-canonical Moves for Melinda's Physical 2^4 Hypercube):
  ['KeyI', 'x'],
  ['KeyK', 'x_prime'],
  ['KeyJ', 'y'],
  ['KeyL', 'y_prime'],
  ['KeyU', 'z_prime'],
  ['KeyO', 'z'],
];
let previouslySelectedButton = null;

import { phys2x2x2x2v1 } from "./puzzlesvgs/phys2x2x2x2v1";
import { phys2x2x2x2v2 } from "./puzzlesvgs/phys2x2x2x2v2";

export const melindas_physical_2x2x2x2_noncanonical = {
  titletext: "Melinda's 2×2×2×2 Physical Hypercube 2D Projection (Noncanonical Moves)",
  subtitletext:
    'Code repurposed from <a href="https://2x2x2x2scrambler.github.io/">Grant\'s Physical 2^4 Scrambler</a>',
  controlstext: "",
  svgversions: [
    phys2x2x2x2v1,
    phys2x2x2x2v2,
  ],
  linkedtris: [
    ["tri0",  "tri1",  "tri2",  "tri3",  "tri72", "tri73", "tri74", "tri75"],
    ["tri8",  "tri9",  "tri10", "tri11", "tri56", "tri57", "tri58", "tri59"],
    ["tri16", "tri17", "tri18", "tri19", "tri64", "tri65", "tri66", "tri67"],
    ["tri24", "tri25", "tri26", "tri27", "tri48", "tri49", "tri50", "tri51"],
    ["tri32", "tri33", "tri34", "tri35", "tri88", "tri89", "tri90", "tri91"],
    ["tri40", "tri41", "tri42", "tri43", "tri80", "tri81", "tri82", "tri83"],
    [
      "tri4",
      "tri5",
      "tri6",
      "tri7",
      "tri12",
      "tri13",
      "tri14",
      "tri15",
      "tri20",
      "tri21",
      "tri22",
      "tri23",
      "tri28",
      "tri29",
      "tri30",
      "tri31",
      "tri36",
      "tri37",
      "tri38",
      "tri39",
      "tri44",
      "tri45",
      "tri46",
      "tri47"
    ],
    [
      "tri52",
      "tri53",
      "tri54",
      "tri55",
      "tri60",
      "tri61",
      "tri62",
      "tri63",
      "tri68",
      "tri69",
      "tri70",
      "tri71",
      "tri76",
      "tri77",
      "tri78",
      "tri79",
      "tri84",
      "tri85",
      "tri86",
      "tri87",
      "tri92",
      "tri93",
      "tri94",
      "tri95"
    ]
  ],
  cubies: [
    ["tri8",  "tri1",  "tri5",  "tri12", "tri34", "tri39"],
    ["tri9",  "tri13", "tri38", "tri44", "tri35", "tri40"],
    ["tri10", "tri3",  "tri15", "tri6",  "tri20", "tri16"],
    ["tri11", "tri14", "tri47", "tri21", "tri17", "tri42"],
    ["tri24", "tri28", "tri45", "tri37", "tri33", "tri41"],
    ["tri25", "tri0",  "tri29", "tri36", "tri4",  "tri32"],
    ["tri26", "tri19", "tri31", "tri46", "tri22", "tri43"],
    ["tri27", "tri2",  "tri18", "tri30", "tri7",  "tri23"],

    ["tri56", "tri60", "tri85", "tri95", "tri81", "tri90"],
    ["tri57", "tri61", "tri76", "tri94", "tri72", "tri91"],
    ["tri58", "tri63", "tri68", "tri86", "tri64", "tri83"],
    ["tri59", "tri62", "tri69", "tri79", "tri65", "tri74"],
    ["tri48", "tri52", "tri93", "tri77", "tri73", "tri89"],
    ["tri49", "tri53", "tri84", "tri92", "tri80", "tri88"],
    ["tri50", "tri55", "tri78", "tri70", "tri67", "tri75"],
    ["tri51", "tri54", "tri87", "tri71", "tri66", "tri82"],
  ],
  colors: [
    'orange',
    'red',
    'yellow',
    'linen',
    'rebeccapurple',
    'fuchsia',
    'limegreen',
    'dodgerblue',
  ],
  puzzleState: [
    [
      [0, 7, 2, 5],
      [0, 7, 2, 4],
      [0, 7, 3, 4],
      [0, 7, 3, 5],
      [0, 6, 2, 5],
      [0, 6, 2, 4],
      [0, 6, 3, 4],
      [0, 6, 3, 5],
    ],
    [
      [1, 7, 2, 4],
      [1, 7, 2, 5],
      [1, 7, 3, 5],
      [1, 7, 3, 4],
      [1, 6, 2, 4],
      [1, 6, 2, 5],
      [1, 6, 3, 5],
      [1, 6, 3, 4],
    ],
  ],
  addControls: function () {
    const container = document.getElementById("controlbuttons");
    cellgripkeys.forEach((key, index) => {
      const keyCode = key[0]; // e.g., 'KeyW'
      let keyLabel = key[1].slice(0, key[1].length - 1); // e.g., 'L'
      keyLabel = keyLabel[0].toUpperCase() + keyLabel.slice(1, keyLabel.length);
    
      // Create a wrapper div to contain both the button and the label, with a border
      const wrapper = document.createElement("div");
      wrapper.setAttribute(
        "style",
        `
            display: inline-block;
            position: relative;
            margin: 5px;
            width: 60px;
            height: 60px;
            border: 1px solid #ccc; /* Add a border */
            border-radius: 5px; /* Optional: rounded corners */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Optional: add some shadow for emphasis */
            cursor: pointer;
            touch-action: manipulation;
        `
      );
    
      const button = document.createElement("input");
      button.setAttribute("type", "radio");
      button.setAttribute("name", "cellgrip");
      button.setAttribute("id", keyCode); // Use keyCode as the ID
      button.setAttribute(
        "style",
        `
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            opacity: 0; /* Make the button invisible but still clickable */
        `
      );
    
      const label = document.createElement("label");
      label.setAttribute("for", keyCode); // Match the label to the button's ID
      label.textContent = keyLabel;
      label.setAttribute(
        "style",
        `
            display: block;
            text-align: center;
            font-size: 12px;
            line-height: 60px;
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            pointer-events: none; /* Allow clicks to pass through to the button */
        `
      );
    
      button.addEventListener("click", (e) => {
        // Check if the button is already selected (checked)
        if (button.checked && previouslySelectedButton === button) {
          // Deselect the button
          button.checked = false;
          const keyEvent = new KeyboardEvent("keyup", {
            code: keyCode,
            key: keyCode.replace("Key", ""),
            bubbles: true
          });
          document.dispatchEvent(keyEvent);
          previouslySelectedButton = null; // Reset the previously selected button
          // Revert the styles
          label.style.backgroundColor = "";
          label.style.color = "";
          label.style.fontWeight = "";
        } else {
          // Emit keyup event for the previously selected button if different
          if (previouslySelectedButton && previouslySelectedButton !== button) {
            const previousKey = previouslySelectedButton.getAttribute("id");
            const previousKeyEvent = new KeyboardEvent("keyup", {
              code: previousKey,
              key: previousKey.replace("Key", ""),
              bubbles: true
            });
            document.dispatchEvent(previousKeyEvent);
    
            // Revert the previous button's styles
            const previousLabel = document.querySelector(
              `label[for="${previousKey}"]`
            );
            previousLabel.style.backgroundColor = "";
            previousLabel.style.color = "";
            previousLabel.style.fontWeight = "";
          }
    
          // Emit keydown event for the currently selected button
          if (e.target.checked) {
            const keyEvent = new KeyboardEvent("keydown", {
              code: keyCode,
              key: keyCode.replace("Key", ""),
              bubbles: true
            });
            document.dispatchEvent(keyEvent);
            previouslySelectedButton = button; // Update the previously selected button
    
            // Apply the selected styles
            label.style.backgroundColor = "black";
            label.style.color = "white";
            label.style.fontWeight = "bold";
          }
        }
      });
    
      // Append the button and label to the wrapper, then the wrapper to the container
      wrapper.appendChild(button);
      wrapper.appendChild(label);
      container.appendChild(wrapper);
    });
    container.appendChild(document.createElement("br"));
    movekeys.forEach((key) => {
      const button = document.createElement("button");
      button.textContent = key[1].replace("_prime", "'");
      button.setAttribute(
        "style",
        `
            width: 50px;
            height: 50px;
            margin: 5px;
            font-size: 12px;
            text-align: center;
            cursor: pointer;
            touch-action: manipulation;
            display: inline-block;
        `
      );
    
      button.addEventListener("click", () => {
        const event = new KeyboardEvent("keydown", {
          code: key[0],
          key: key[0].replace("Key", ""),
          bubbles: true
        });
        document.dispatchEvent(event);
      });
    
      container.appendChild(button);
    });

    const controlsDiv = document.getElementById("controlscontainer");
    controlsDiv.innerHTML = "";
    let htmlContent = `
          <div style="padding: 10px; font-family: Arial, sans-serif; font-size: 14px;">
              <h2 style="margin-bottom: 10px;">Keyboard Controls</h2>
              <div style="margin-bottom: 20px;">
                  <h3 style="margin-bottom: 5px;">Cell Grips</h3>
                  <ul style="list-style-type: none; padding: 0;">
      `;
    cellgripkeys.forEach((key) => {
      htmlContent += `
              <li style="margin-bottom: 5px;">
                  <strong>\"${key[0]}\":</strong> Grip ${key[1].slice(
        0,
        key[1].length - 1
      )} Cell
              </li>
          `;
    });
    htmlContent += `
                  </ul>
              </div>
              <div>
                  <h3 style="margin-bottom: 5px;">Rotations</h3>
                  <ul style="list-style-type: none; padding: 0;">
      `;
    movekeys.forEach((key) => {
      htmlContent += `
              <li style="margin-bottom: 5px;">
                  <strong>\"${key[0]}\":</strong> ${key[1]
        .replace("_prime", "'")
        .toUpperCase()} Rotation
              </li>
          `;
    });
    htmlContent += `
                  </ul>
              </div>
          </div>
      `;
    controlsDiv.innerHTML = htmlContent;
  },
  checkSolved: function () {
    for (let i = 0; i < this.linkedtris.length; i++) {
      for (let j = 0; j < this.linkedtris[i].length - 1;) {
        if (document.getElementById(this.linkedtris[i][j])) {
          let r = j + 1;
          while (!document.getElementById(this.linkedtris[i][r])) {
            r += 1;
          }
          if (r >= this.linkedtris[i].length) {
            continue;
          }
          if (
            document.getElementById(this.linkedtris[i][r]).getAttribute("fill") !==
            document.getElementById(this.linkedtris[i][j]).getAttribute("fill")
          ) {
            return false;
          } else {
            j = r;
          }
        }
      }
    }
    return true;
  },
  handleKeydown: function (e) {
    for (let i = 0; i < cellgripkeys.length; i++) {
      if (e.code === cellgripkeys[i][0]) {
        cellgripkeys[i][2] = true;
      }
      for (let j = 0; j < movekeys.length; j++) {
        if (
          cellgripkeys[i][2] &&
          e.code === movekeys[j][0]
        ) {
          this.puzzleState = move[
            `${cellgripkeys[i][1]}${movekeys[j][1]}`
          ](this.puzzleState);
        }
      }
    }
    this.permuteCube(this.puzzleState);
  },
  handleKeyup: function (e) {
    for (let i = 0; i < cellgripkeys.length; i++) {
      if (e.code === cellgripkeys[i][0]) {
        cellgripkeys[i][2] = false;
      }
    }
  },
  permuteCube: function (p) {
    let orderedtris = [
      p[0][0][3],
      p[0][3][3],
      p[0][4][3],
      p[0][7][3],
      p[0][0][0],
      p[0][3][0],
      p[0][7][0],
      p[0][4][0],
      p[0][3][2],
      p[0][2][2],
      p[0][7][2],
      p[0][6][2],
      p[0][3][0],
      p[0][2][0],
      p[0][6][0],
      p[0][7][0],
      p[0][7][1],
      p[0][6][1],
      p[0][4][1],
      p[0][5][1],
      p[0][7][0],
      p[0][6][0],
      p[0][5][0],
      p[0][4][0],
      p[0][1][2],
      p[0][0][2],
      p[0][5][2],
      p[0][4][2],
      p[0][1][0],
      p[0][0][0],
      p[0][4][0],
      p[0][5][0],
      p[0][0][1],
      p[0][1][1],
      p[0][3][1],
      p[0][2][1],
      p[0][0][0],
      p[0][1][0],
      p[0][2][0],
      p[0][3][0],
      p[0][2][3],
      p[0][1][3],
      p[0][6][3],
      p[0][5][3],
      p[0][2][0],
      p[0][1][0],
      p[0][5][0],
      p[0][6][0],
      p[1][1][2],
      p[1][0][2],
      p[1][5][2],
      p[1][4][2],
      p[1][1][0],
      p[1][0][0],
      p[1][4][0],
      p[1][5][0],
      p[1][3][2],
      p[1][2][2],
      p[1][7][2],
      p[1][6][2],
      p[1][3][0],
      p[1][2][0],
      p[1][6][0],
      p[1][7][0],
      p[1][7][1],
      p[1][6][1],
      p[1][4][1],
      p[1][5][1],
      p[1][7][0],
      p[1][6][0],
      p[1][5][0],
      p[1][4][0],
      p[1][2][3],
      p[1][1][3],
      p[1][6][3],
      p[1][5][3],
      p[1][2][0],
      p[1][1][0],
      p[1][5][0],
      p[1][6][0],
      p[1][0][3],
      p[1][3][3],
      p[1][4][3],
      p[1][7][3],
      p[1][0][0],
      p[1][3][0],
      p[1][7][0],
      p[1][4][0],
      p[1][0][1],
      p[1][1][1],
      p[1][3][1],
      p[1][2][1],
      p[1][0][0],
      p[1][1][0],
      p[1][2][0],
      p[1][3][0],
    ]; /* LR UD FB IO */

    for (let i = 0; i < orderedtris.length; i++) {
      let tri = document.getElementById(`tri${i}`);
      if (tri) {
        tri.setAttribute('fill', this.colors[orderedtris[i]]);
      }
    }
  },
  reset: function () {
    for (let i = 0; i < 96; i++) {
      let tri = document.getElementById(`tri${i}`);
      if (tri) {
        tri.setAttribute('stroke', 'black');
        tri.setAttribute('stroke-linecap', 'round');
        tri.setAttribute('stroke-linejoin', 'round');
      }
    }
    this.puzzleState = [
      [
        [0, 7, 2, 5],
        [0, 7, 2, 4],
        [0, 7, 3, 4],
        [0, 7, 3, 5],
        [0, 6, 2, 5],
        [0, 6, 2, 4],
        [0, 6, 3, 4],
        [0, 6, 3, 5],
      ],
      [
        [1, 7, 2, 4],
        [1, 7, 2, 5],
        [1, 7, 3, 5],
        [1, 7, 3, 4],
        [1, 6, 2, 4],
        [1, 6, 2, 5],
        [1, 6, 3, 5],
        [1, 6, 3, 4],
      ],
    ];
    this.permuteCube(this.puzzleState);
    for (let j = 0; j < cellgripkeys.length; j++) {
      cellgripkeys[j][2] = false;
    }
    previouslySelectedButton = null;
  },
  resetHighlights: function () {
    for (let i = 0; i < 96; i++) {
      let tri = document.getElementById(`tri${i}`);
      if (tri) {
        tri.setAttribute('stroke-width', '0.33');
        let parent = tri.parentNode;
        parent.insertBefore(tri, parent.firstChild);
      }
    }
  },
  getPermutation: function () {
    let perm = [];
    for (let i = 0; i < 96; i++) {
      let tri = document.getElementById(`tri${i}`);
      if (tri) {
        perm.push(tri.getAttribute('fill'));
      } else {
        perm.push(null);
      }
    }
    return perm;
  },
  updateHighlights: function (oldPerm) {
    const newPerm = this.getPermutation();
    for (let i = 0; i < this.cubies.length; i++) {
      const cubie = this.cubies[i];
      let changed = false;
      for (let j = 0; j < cubie.length; j++) {
        if (oldPerm[cubie[j]] !== newPerm[cubie[j]]) {
          changed = true;
          break;
        }
      }
      if (changed) {
        for (let k = 0; k < cubie.length; k++) {
          let tri = document.getElementById(cubie[k]);
          if (tri) {
            tri.setAttribute('stroke-width', '1.75');
            let parent = tri.parentNode;
            parent.appendChild(tri);
          }
        }
      }
    }
  },
  randomize: function () {
    /* Generates a random scramble sequence and draws the resulting 4D Rubik's cube, based on the scrambling algorithm from https://2x2x2x2scrambler.github.io/ */
    const physmoves = [
      'y',
      "y'",
      'y2',
      'x2',
      'z2',
      'x2,y',
      "x2,y'",
      'x',
      'x,y',
      "x,y'",
      'x,y2',
      "x'",
      "x',y",
      "x',y'",
      "x',y2",
      'z',
      'z,y',
      "z,y'",
      'z,y2',
      "z'",
      "z',y",
      "z',y'",
      "z',y2",
      '',
    ];
    const scrambleLength = [16, 14, 12];
    let str = '<br>Scramble Notation: ';
    let scrambleLen = scrambleLength[Math.floor(Math.random() * 3)];
    for (let i = 0; i < scrambleLen; i++) {
      let Lrand = Math.floor(Math.random() * 24);
      this.puzzleState[0] = LorRTurn(this.puzzleState[0], Lrand);
      let Rrand = Math.floor(Math.random() * 24);
      this.puzzleState[1] = LorRTurn(this.puzzleState[1], Rrand);
      this.puzzleState = hashtag(this.puzzleState);
      let Lrandstr = '';
      let Rrandstr = '';
      if (Lrand !== 24) {
        Lrandstr = 'L' + physmoves[Lrand] + ' ';
      }
      if (Rrand !== 24) {
        Rrandstr = 'R' + physmoves[Rrand] + ' ';
      }
      str += Lrandstr + Rrandstr + '# ';
    }
    str.replace('# # ', '');
    document.getElementById('scramblenotation').innerHTML = str;
    this.permuteCube(this.puzzleState);
  },
};
