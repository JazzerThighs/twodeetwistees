export const melindas_physical_2x2x2x2 = {
    titletext: "Melinda's 2×2×2×2 Physical Hypercube 2D Projection",
    subtitletext: "Code repurposed from <a href=\"https://2x2x2x2scrambler.github.io/\">Grant's Physical 2^4 Scrambler</a>",
    controlstext: "Controls: <i>(Canonical Moves for Melinda's Physical 2^4)</i><br />Lx &nbsp;&nbsp; -> \"KeyR\"&nbsp;&nbsp;&nbsp;&nbsp; Rx&nbsp;&nbsp;&nbsp; -> \"KeyU\" <br />Lx' &nbsp; -> \"KeyF\"&nbsp;&nbsp;&nbsp;&nbsp; Rx'&nbsp;&nbsp; -> \"KeyJ\" <br />Ly &nbsp;&nbsp; -> \"KeyE\"&nbsp;&nbsp;&nbsp;&nbsp; Ry&nbsp;&nbsp;&nbsp; -> \"KeyK\" <br />Ly' &nbsp; -> \"KeyD\"&nbsp;&nbsp;&nbsp;&nbsp; Ry'&nbsp;&nbsp; -> \"KeyI\" <br />Lz &nbsp;&nbsp; -> \"KeyW\"&nbsp;&nbsp;&nbsp;&nbsp; Rz&nbsp;&nbsp;&nbsp; -> \"KeyL\" <br />Lz' &nbsp; -> \"KeyS\"&nbsp;&nbsp;&nbsp;&nbsp; Rz'&nbsp;&nbsp; -> \"KeyO\" <br />Uy2 &nbsp; -> \"KeyQ\"&nbsp;&nbsp;&nbsp;&nbsp; Dy2&nbsp;&nbsp; -> \"KeyP\" <br />ix &nbsp;&nbsp; -> \"KeyT\"&nbsp;&nbsp;&nbsp;&nbsp; ix&nbsp;&nbsp;&nbsp; -> \"KeyY\" <br />ix'&nbsp;&nbsp; -> \"KeyG\"&nbsp;&nbsp;&nbsp;&nbsp; ix'&nbsp;&nbsp;&nbsp;-> \"KeyH\" <br />gyro &nbsp;-> \"KeyA\"&nbsp;&nbsp;&nbsp;&nbsp; gyro'&nbsp;-> \"Semicolon\"</br>",
    svgversions: [
        "<svg id=\"cube\" viewbox=\"-5 -5 375 135\" width=\"100%\" height=\"auto\" preserveAspectRatio=\"xMidYMid meet\" style=\"display: block; max-width: 95%; height: auto; padding: 1rem\"><polygon id=\"tri1\" points=\"25.000,50.000 50.000,50.000 25.000,25.000\" /><polygon id=\"tri2\" points=\"25.000,50.000 0.000,50.000 25.000,75.000\" /><polygon id=\"tri3\" points=\"25.000,50.000 50.000,50.000 25.000,75.000\" /><polygon id=\"tri0\" points=\"25.000,50.000 0.000,50.000 25.000,25.000\" /><polygon id=\"tri5\" points=\"50.000,25.000 25.000,25.000 50.000,50.000\" /><polygon id=\"tri4\" points=\"0.000,25.000 25.000,25.000 0.000,50.000\" /><polygon id=\"tri6\" points=\"50.000,75.000 25.000,75.000 50.000,50.000\" /><polygon id=\"tri8\" points=\"75.000,50.000 50.000,50.000 75.000,25.000\" /><polygon id=\"tri7\" points=\"0.000,75.000 25.000,75.000 0.000,50.000\" /><polygon id=\"tri9\" points=\"75.000,50.000 100.000,50.000 75.000,25.000\" /><polygon id=\"tri11\" points=\"75.000,50.000 100.000,50.000 75.000,75.000\" /><polygon id=\"tri10\" points=\"75.000,50.000 50.000,50.000 75.000,75.000\" /><polygon id=\"tri12\" points=\"50.000,25.000 75.000,25.000 50.000,50.000\" /><polygon id=\"tri15\" points=\"50.000,75.000 75.000,75.000 50.000,50.000\" /><polygon id=\"tri13\" points=\"100.000,25.000 75.000,25.000 100.000,50.000\" /><polygon id=\"tri17\" points=\"75.000,100.000 100.000,100.000 75.000,75.000\" /><polygon id=\"tri14\" points=\"100.000,75.000 75.000,75.000 100.000,50.000\" /><polygon id=\"tri18\" points=\"75.000,100.000 50.000,100.000 75.000,125.000\" /><polygon id=\"tri19\" points=\"75.000,100.000 100.000,100.000 75.000,125.000\" /><polygon id=\"tri16\" points=\"75.000,100.000 50.000,100.000 75.000,75.000\" /><polygon id=\"tri21\" points=\"100.000,75.000 75.000,75.000 100.000,100.000\" /><polygon id=\"tri22\" points=\"100.000,125.000 75.000,125.000 100.000,100.000\" /><polygon id=\"tri23\" points=\"50.000,125.000 75.000,125.000 50.000,100.000\" /><polygon id=\"tri24\" points=\"150.000,25.000 125.000,25.000 150.000,0.000\" /><polygon id=\"tri20\" points=\"50.000,75.000 75.000,75.000 50.000,100.000\" /><polygon id=\"tri25\" points=\"150.000,25.000 175.000,25.000 150.000,0.000\" /><polygon id=\"tri26\" points=\"150.000,25.000 125.000,25.000 150.000,50.000\" /><polygon id=\"tri29\" points=\"175.000,0.000 150.000,0.000 175.000,25.000\" /><polygon id=\"tri30\" points=\"175.000,50.000 150.000,50.000 175.000,25.000\" /><polygon id=\"tri31\" points=\"125.000,50.000 150.000,50.000 125.000,25.000\" /><polygon id=\"tri27\" points=\"150.000,25.000 175.000,25.000 150.000,50.000\" /><polygon id=\"tri35\" points=\"87.500,12.500 112.500,12.500 75.000,25.000\" /><polygon id=\"tri28\" points=\"125.000,0.000 150.000,0.000 125.000,25.000\" /><polygon id=\"tri33\" points=\"87.500,12.500 112.500,12.500 100.000,0.000\" /><polygon id=\"tri32\" points=\"87.500,12.500 62.500,12.500 100.000,0.000\" /><polygon id=\"tri37\" points=\"125.000,0.000 100.000,0.000 112.500,12.500\" /><polygon id=\"tri36\" points=\"75.000,0.000 100.000,0.000 62.500,12.500\" /><polygon id=\"tri34\" points=\"87.500,12.500 62.500,12.500 75.000,25.000\" /><polygon id=\"tri39\" points=\"50.000,25.000 75.000,25.000 62.500,12.500\" /><polygon id=\"tri41\" points=\"112.500,37.500 125.000,25.000 112.500,12.500\" /><polygon id=\"tri40\" points=\"112.500,37.500 100.000,50.000 112.500,12.500\" /><polygon id=\"tri43\" points=\"112.500,37.500 125.000,25.000 112.500,62.500\" /><polygon id=\"tri38\" points=\"100.000,25.000 75.000,25.000 112.500,12.500\" /><polygon id=\"tri42\" points=\"112.500,37.500 100.000,50.000 112.500,62.500\" /><polygon id=\"tri44\" points=\"100.000,25.000 112.500,12.500 100.000,50.000\" /><polygon id=\"tri46\" points=\"125.000,50.000 112.500,62.500 125.000,25.000\" /><polygon id=\"tri45\" points=\"125.000,0.000 112.500,12.500 125.000,25.000\" /><polygon id=\"tri47\" points=\"100.000,75.000 112.500,62.500 100.000,50.000\" /><polygon id=\"tri50\" points=\"200.000,25.000 175.000,25.000 200.000,50.000\" /><polygon id=\"tri49\" points=\"200.000,25.000 225.000,25.000 200.000,0.000\" /><polygon id=\"tri51\" points=\"200.000,25.000 225.000,25.000 200.000,50.000\" /><polygon id=\"tri52\" points=\"175.000,0.000 200.000,0.000 175.000,25.000\" /><polygon id=\"tri48\" points=\"200.000,25.000 175.000,25.000 200.000,0.000\" /><polygon id=\"tri57\" points=\"275.000,50.000 300.000,50.000 275.000,25.000\" /><polygon id=\"tri55\" points=\"175.000,50.000 200.000,50.000 175.000,25.000\" /><polygon id=\"tri56\" points=\"275.000,50.000 250.000,50.000 275.000,25.000\" /><polygon id=\"tri54\" points=\"225.000,50.000 200.000,50.000 225.000,25.000\" /><polygon id=\"tri58\" points=\"275.000,50.000 250.000,50.000 275.000,75.000\" /><polygon id=\"tri60\" points=\"250.000,25.000 275.000,25.000 250.000,50.000\" /><polygon id=\"tri59\" points=\"275.000,50.000 300.000,50.000 275.000,75.000\" /><polygon id=\"tri62\" points=\"300.000,75.000 275.000,75.000 300.000,50.000\" /><polygon id=\"tri63\" points=\"250.000,75.000 275.000,75.000 250.000,50.000\" /><polygon id=\"tri64\" points=\"275.000,100.000 250.000,100.000 275.000,75.000\" /><polygon id=\"tri53\" points=\"225.000,0.000 200.000,0.000 225.000,25.000\" /><polygon id=\"tri66\" points=\"275.000,100.000 250.000,100.000 275.000,125.000\" /><polygon id=\"tri65\" points=\"275.000,100.000 300.000,100.000 275.000,75.000\" /><polygon id=\"tri67\" points=\"275.000,100.000 300.000,100.000 275.000,125.000\" /><polygon id=\"tri68\" points=\"250.000,75.000 275.000,75.000 250.000,100.000\" /><polygon id=\"tri70\" points=\"300.000,125.000 275.000,125.000 300.000,100.000\" /><polygon id=\"tri61\" points=\"300.000,25.000 275.000,25.000 300.000,50.000\" /><polygon id=\"tri69\" points=\"300.000,75.000 275.000,75.000 300.000,100.000\" /><polygon id=\"tri71\" points=\"250.000,125.000 275.000,125.000 250.000,100.000\" /><polygon id=\"tri74\" points=\"325.000,50.000 300.000,50.000 325.000,75.000\" /><polygon id=\"tri73\" points=\"325.000,50.000 350.000,50.000 325.000,25.000\" /><polygon id=\"tri72\" points=\"325.000,50.000 300.000,50.000 325.000,25.000\" /><polygon id=\"tri76\" points=\"300.000,25.000 325.000,25.000 300.000,50.000\" /><polygon id=\"tri75\" points=\"325.000,50.000 350.000,50.000 325.000,75.000\" /><polygon id=\"tri77\" points=\"350.000,25.000 325.000,25.000 350.000,50.000\" /><polygon id=\"tri80\" points=\"237.500,37.500 225.000,25.000 237.500,12.500\" /><polygon id=\"tri79\" points=\"300.000,75.000 325.000,75.000 300.000,50.000\" /><polygon id=\"tri81\" points=\"237.500,37.500 250.000,50.000 237.500,12.500\" /><polygon id=\"tri83\" points=\"237.500,37.500 250.000,50.000 237.500,62.500\" /><polygon id=\"tri82\" points=\"237.500,37.500 225.000,25.000 237.500,62.500\" /><polygon id=\"tri84\" points=\"225.000,0.000 237.500,12.500 225.000,25.000\" /><polygon id=\"tri78\" points=\"350.000,75.000 325.000,75.000 350.000,50.000\" /><polygon id=\"tri87\" points=\"225.000,50.000 237.500,62.500 225.000,25.000\" /><polygon id=\"tri85\" points=\"250.000,25.000 237.500,12.500 250.000,50.000\" /><polygon id=\"tri90\" points=\"262.500,12.500 237.500,12.500 275.000,25.000\" /><polygon id=\"tri88\" points=\"262.500,12.500 237.500,12.500 250.000,0.000\" /><polygon id=\"tri86\" points=\"250.000,75.000 237.500,62.500 250.000,50.000\" /><polygon id=\"tri91\" points=\"262.500,12.500 287.500,12.500 275.000,25.000\" /><polygon id=\"tri93\" points=\"275.000,0.000 250.000,0.000 287.500,12.500\" /><polygon id=\"tri89\" points=\"262.500,12.500 287.500,12.500 250.000,0.000\" /><polygon id=\"tri95\" points=\"250.000,25.000 275.000,25.000 237.500,12.500\" /><polygon id=\"tri94\" points=\"300.000,25.000 275.000,25.000 287.500,12.500\" /><polygon id=\"tri92\" points=\"225.000,0.000 250.000,0.000 237.500,12.500\" /></svg>",
    ],
    linkedtris: [
        ["tri0",  "tri1",  "tri2",  "tri3",  "tri72", "tri73", "tri74", "tri75"],
        ["tri8",  "tri9",  "tri10", "tri11", "tri56", "tri57", "tri58", "tri59"],
        ["tri16", "tri17", "tri18", "tri19", "tri64", "tri65", "tri66", "tri67"],
        ["tri24", "tri25", "tri26", "tri27", "tri48", "tri49", "tri50", "tri51"],
        ["tri32", "tri33", "tri34", "tri35", "tri88", "tri89", "tri90", "tri91"],
        ["tri40", "tri41", "tri42", "tri43", "tri80", "tri81", "tri82", "tri83"],
        ["tri4",  "tri5",  "tri6",  "tri7",  "tri44", "tri45", "tri46", "tri47"],
        ["tri52", "tri53", "tri54", "tri55", "tri76", "tri77", "tri78", "tri79"]
    ],
    cubies: [
        [8, 1, 5, 12, 34, 39],
        [9, 13, 38, 44, 35, 40],
        [10, 3, 15, 6, 20, 16],
        [11, 14, 47, 21, 17, 42],
        [24, 28, 45, 37, 33, 41],
        [25, 0, 29, 36, 4, 32],
        [26, 19, 31, 46, 22, 43],
        [27, 2, 18, 30, 7, 23],

        [56, 60, 85, 95, 81, 90],
        [57, 61, 76, 94, 72, 91],
        [58, 63, 68, 86, 64, 83],
        [59, 62, 69, 79, 65, 74],
        [48, 52, 93, 77, 73, 89],
        [49, 53, 84, 92, 80, 88],
        [50, 55, 78, 70, 67, 75],
        [51, 54, 87, 71, 66, 82],
    ],
    colors: [
        "orange",
        "red",
        "yellow",
        "linen",
        "rebeccapurple",
        "fuchsia",
        "limegreen",
        "dodgerblue"
    ],
    puzzleState: [
        [
            [0, 7, 2, 5],
            [0, 7, 2, 4],
            [0, 7, 3, 4],
            [0, 7, 3, 5],
            [0, 6, 2, 5],
            [0, 6, 2, 4],
            [0, 6, 3, 4],
            [0, 6, 3, 5]
        ],
        [
            [1, 7, 2, 4],
            [1, 7, 2, 5],
            [1, 7, 3, 5],
            [1, 7, 3, 4],
            [1, 6, 2, 4],
            [1, 6, 2, 5],
            [1, 6, 3, 5],
            [1, 6, 3, 4]
        ]
    ],
    keys: [
        // Canonical Moves for Melinda's Physical 2^4 Hypercube:
        "KeyR", // Lx
        "KeyF", // Lx'
        "KeyE", // Ly
        "KeyD", // Ly'
        "KeyW", // Lz
        "KeyS", // Lz'
        "KeyU", // Rx
        "KeyJ", // Rx'
        "KeyK", // Ry
        "KeyI", // Ry'
        "KeyL", // Rz
        "KeyO", // Rz'
        "KeyQ", // Uy2
        "KeyP", // Dy2
        "KeyT", // Ix
        "KeyY", // Ix
        "KeyG", // Ix'
        "KeyH", // Ix'
        "KeyA", // gyro
        "Semicolon", // gyro'

        "KeyZ", // Ux

        // HyperSpeedCube 2^4 Grip Bindings (Non-canonical Moves for Melinda's Physical 2^4 Hypercube):
        "KeyW", // Grip L Cell
        "KeyE", // Grip U Cell
        "KeyR", // Grip B Cell
        "KeyS", // Grip F Cell
        "KeyD", // Grip I Cell
        "KeyF", // Grip R Cell
        "KeyC", // Grip D Cell
        "KeyV", // Grip O Cell

        "KeyI", // Gripped(x)
        "KeyK", // Gripped(x')
        "KeyJ", // Gripped(y)
        "KeyL", // Gripped(y')
        "KeyU", // Gripped(z')
        "KeyO" // Gripped(z)
    ],
    move: {
        Lx: function (p) {
            return [
                [
                    [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]],
                    [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
                    [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
                    [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
                    [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
                    [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
                    [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
                    [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]],
                ],
                p[1],
            ];
        },
        Ly: function (p) {
            return [
                [
                    [p[0][3][0], p[0][3][1], p[0][3][3], p[0][3][2]],
                    [p[0][0][0], p[0][0][1], p[0][0][3], p[0][0][2]],
                    [p[0][1][0], p[0][1][1], p[0][1][3], p[0][1][2]],
                    [p[0][2][0], p[0][2][1], p[0][2][3], p[0][2][2]],
                    [p[0][7][0], p[0][7][1], p[0][7][3], p[0][7][2]],
                    [p[0][4][0], p[0][4][1], p[0][4][3], p[0][4][2]],
                    [p[0][5][0], p[0][5][1], p[0][5][3], p[0][5][2]],
                    [p[0][6][0], p[0][6][1], p[0][6][3], p[0][6][2]],
                ],
                p[1],
            ];
        },
        Lz: function (p) {
            return [
                [
                    [p[0][4][0], p[0][4][3], p[0][4][2], p[0][4][1]],
                    [p[0][0][0], p[0][0][3], p[0][0][2], p[0][0][1]],
                    [p[0][3][0], p[0][3][3], p[0][3][2], p[0][3][1]],
                    [p[0][7][0], p[0][7][3], p[0][7][2], p[0][7][1]],
                    [p[0][5][0], p[0][5][3], p[0][5][2], p[0][5][1]],
                    [p[0][1][0], p[0][1][3], p[0][1][2], p[0][1][1]],
                    [p[0][2][0], p[0][2][3], p[0][2][2], p[0][2][1]],
                    [p[0][6][0], p[0][6][3], p[0][6][2], p[0][6][1]],
                ],
                p[1],
            ];
        },
        Rx: function (p) {
            return [
                p[0],
                [
                    [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]],
                    [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
                    [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
                    [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
                    [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
                    [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
                    [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
                    [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]],
                ],
            ];
        },
        Ry: function (p) {
            return [
                p[0],
                [
                    [p[1][3][0], p[1][3][1], p[1][3][3], p[1][3][2]],
                    [p[1][0][0], p[1][0][1], p[1][0][3], p[1][0][2]],
                    [p[1][1][0], p[1][1][1], p[1][1][3], p[1][1][2]],
                    [p[1][2][0], p[1][2][1], p[1][2][3], p[1][2][2]],
                    [p[1][7][0], p[1][7][1], p[1][7][3], p[1][7][2]],
                    [p[1][4][0], p[1][4][1], p[1][4][3], p[1][4][2]],
                    [p[1][5][0], p[1][5][1], p[1][5][3], p[1][5][2]],
                    [p[1][6][0], p[1][6][1], p[1][6][3], p[1][6][2]],
                ],
            ];
        },
        Rz: function (p) {
            return [
                p[0],
                [
                    [p[1][4][0], p[1][4][3], p[1][4][2], p[1][4][1]],
                    [p[1][0][0], p[1][0][3], p[1][0][2], p[1][0][1]],
                    [p[1][3][0], p[1][3][3], p[1][3][2], p[1][3][1]],
                    [p[1][7][0], p[1][7][3], p[1][7][2], p[1][7][1]],
                    [p[1][5][0], p[1][5][3], p[1][5][2], p[1][5][1]],
                    [p[1][1][0], p[1][1][3], p[1][1][2], p[1][1][1]],
                    [p[1][2][0], p[1][2][3], p[1][2][2], p[1][2][1]],
                    [p[1][6][0], p[1][6][3], p[1][6][2], p[1][6][1]],
                ],
            ];
        },
        Ux: function (p) {
            return [
                [
                    [p[0][3][0], p[0][3][1], p[0][3][3], p[0][3][2]],
                    [p[0][0][0], p[0][0][1], p[0][0][3], p[0][0][2]],
                    [p[0][1][0], p[0][1][1], p[0][1][3], p[0][1][2]],
                    [p[0][2][0], p[0][2][1], p[0][2][3], p[0][2][2]],
                    p[0][4],
                    p[0][5],
                    p[0][6],
                    p[0][7],
                ],
                [
                    [p[1][1][0], p[1][1][1], p[1][1][3], p[1][1][2]],
                    [p[1][2][0], p[1][2][1], p[1][2][3], p[1][2][2]],
                    [p[1][3][0], p[1][3][1], p[1][3][3], p[1][3][2]],
                    [p[1][0][0], p[1][0][1], p[1][0][3], p[1][0][2]],
                    p[1][4],
                    p[1][5],
                    p[1][6],
                    p[1][7],
                ],
            ];
        },
        Uy: function (p) {
            return [
                [p[0][2], p[0][3], p[1][2], p[1][3], p[0][4], p[0][5], p[0][6], p[0][7]],
                [p[0][0], p[0][1], p[1][0], p[1][1], p[1][4], p[1][5], p[1][6], p[1][7]],
            ];
        },
        Uz: function (p) {
            return [
                [
                    [p[0][1][3], p[0][1][1], p[0][1][2], p[0][1][0]],
                    [p[1][0][3], p[1][0][1], p[1][0][2], p[1][0][0]],
                    [p[1][3][3], p[1][3][1], p[1][3][2], p[1][3][0]],
                    [p[0][2][3], p[0][2][1], p[0][2][2], p[0][2][0]],
                    p[0][4],
                    p[0][5],
                    p[0][6],
                    p[0][7],
                ],
                [
                    [p[1][1][3], p[1][1][1], p[1][1][2], p[1][1][0]],
                    [p[0][0][3], p[0][0][1], p[0][0][2], p[0][0][0]],
                    [p[0][3][3], p[0][3][1], p[0][3][2], p[0][3][0]],
                    [p[1][2][3], p[1][2][1], p[1][2][2], p[1][2][0]],
                    p[1][4],
                    p[1][5],
                    p[1][6],
                    p[1][7],
                ],
            ];
        },
        Dx: function (p) {
            return [
                [
                    p[0][0],
                    p[0][1],
                    p[0][2],
                    p[0][3],
                    [p[0][7][0], p[0][7][1], p[0][7][3], p[0][7][2]],
                    [p[0][4][0], p[0][4][1], p[0][4][3], p[0][4][2]],
                    [p[0][5][0], p[0][5][1], p[0][5][3], p[0][5][2]],
                    [p[0][6][0], p[0][6][1], p[0][6][3], p[0][6][2]],
                ],
                [
                    p[1][0],
                    p[1][1],
                    p[1][2],
                    p[1][3],
                    [p[1][5][0], p[1][5][1], p[1][5][3], p[1][5][2]],
                    [p[1][6][0], p[1][6][1], p[1][6][3], p[1][6][2]],
                    [p[1][7][0], p[1][7][1], p[1][7][3], p[1][7][2]],
                    [p[1][4][0], p[1][4][1], p[1][4][3], p[1][4][2]],
                ],
            ];
        },
        Dy: function (p) {
            return [
                [p[0][0], p[0][1], p[0][2], p[0][3], p[0][6], p[0][7], p[1][6], p[1][7]],
                [p[1][0], p[1][1], p[1][2], p[1][3], p[0][4], p[0][5], p[1][4], p[1][5]],
            ];
        },
        Dz: function (p) {
            return [
                [
                    p[0][0],
                    p[0][1],
                    p[0][2],
                    p[0][3],
                    [p[0][5][3], p[0][5][1], p[0][5][2], p[0][5][0]],
                    [p[1][4][3], p[1][4][1], p[1][4][2], p[1][4][0]],
                    [p[1][7][3], p[1][7][1], p[1][7][2], p[1][7][0]],
                    [p[0][6][3], p[0][6][1], p[0][6][2], p[0][6][0]],
                ],
                [
                    p[1][0],
                    p[1][1],
                    p[1][2],
                    p[1][3],
                    [p[1][5][3], p[1][5][1], p[1][5][2], p[1][5][0]],
                    [p[0][4][3], p[0][4][1], p[0][4][2], p[0][4][0]],
                    [p[0][7][3], p[0][7][1], p[0][7][2], p[0][7][0]],
                    [p[1][6][3], p[1][6][1], p[1][6][2], p[1][6][0]],
                ],
            ];
        },
        Fx: function (p) {
            return [
                [
                    p[0][0],
                    p[0][1],
                    [p[0][3][0], p[0][3][3], p[0][3][2], p[0][3][1]],
                    [p[0][7][0], p[0][7][3], p[0][7][2], p[0][7][1]],
                    p[0][4],
                    p[0][5],
                    [p[0][2][0], p[0][2][3], p[0][2][2], p[0][2][1]],
                    [p[0][6][0], p[0][6][3], p[0][6][2], p[0][6][1]],
                ],
                [
                    p[1][0],
                    p[1][1],
                    [p[1][6][0], p[1][6][3], p[1][6][2], p[1][6][1]],
                    [p[1][2][0], p[1][2][3], p[1][2][2], p[1][2][1]],
                    p[1][4],
                    p[1][5],
                    [p[1][7][0], p[1][7][3], p[1][7][2], p[1][7][1]],
                    [p[1][3][0], p[1][3][3], p[1][3][2], p[1][3][1]],
                ],
            ];
        },
        Fy: function (p) {
            return [
                [p[0][0], p[0][1], p[0][7], p[0][6], p[0][4], p[0][5], p[1][6], p[1][7]],
                [p[1][0], p[1][1], p[0][2], p[0][3], p[1][4], p[1][5], p[1][3], p[1][2]],
            ];
        },
        Fz: function (p) {
            return [
                [
                    p[0][0],
                    p[0][1],
                    [p[1][3][3], p[1][3][1], p[1][3][2], p[1][3][0]],
                    [p[0][2][3], p[0][2][1], p[0][2][2], p[0][2][0]],
                    p[0][4],
                    p[0][5],
                    [p[1][7][3], p[1][7][1], p[1][7][2], p[1][7][0]],
                    [p[0][6][3], p[0][6][1], p[0][6][2], p[0][6][0]],
                ],
                [
                    p[1][0],
                    p[1][1],
                    [p[0][3][3], p[0][3][1], p[0][3][2], p[0][3][0]],
                    [p[1][2][3], p[1][2][1], p[1][2][2], p[1][2][0]],
                    p[1][4],
                    p[1][5],
                    [p[0][7][3], p[0][7][1], p[0][7][2], p[0][7][0]],
                    [p[1][6][3], p[1][6][1], p[1][6][2], p[1][6][0]],
                ],
            ];
        },
        Bx: function (p) {
            return [
                [
                    [p[0][1][0], p[0][1][3], p[0][1][2], p[0][1][1]],
                    [p[0][5][0], p[0][5][3], p[0][5][2], p[0][5][1]],
                    p[0][2],
                    p[0][3],
                    [p[0][0][0], p[0][0][3], p[0][0][2], p[0][0][1]],
                    [p[0][4][0], p[0][4][3], p[0][4][2], p[0][4][1]],
                    p[0][6],
                    p[0][7],
                ],
                [
                    [p[1][4][0], p[1][4][3], p[1][4][2], p[1][4][1]],
                    [p[1][0][0], p[1][0][3], p[1][0][2], p[1][0][1]],
                    p[1][2],
                    p[1][3],
                    [p[1][5][0], p[1][5][3], p[1][5][2], p[1][5][1]],
                    [p[1][1][0], p[1][1][3], p[1][1][2], p[1][1][1]],
                    p[1][6],
                    p[1][7],
                ],
            ];
        },
        By: function (p) {
            return [
                [p[1][0], p[1][1], p[0][2], p[0][3], p[0][1], p[0][0], p[0][6], p[0][7]],
                [p[1][5], p[1][4], p[1][2], p[1][3], p[0][4], p[0][5], p[1][6], p[1][7]],
            ];
        },
        Bz: function (p) {
            return [
                [
                    [p[0][1][3], p[0][1][1], p[0][1][2], p[0][1][0]],
                    [p[1][0][3], p[1][0][1], p[1][0][2], p[1][0][0]],
                    p[0][2],
                    p[0][3],
                    [p[0][5][3], p[0][5][1], p[0][5][2], p[0][5][0]],
                    [p[1][4][3], p[1][4][1], p[1][4][2], p[1][4][0]],
                    p[0][6],
                    p[0][7],
                ],
                [
                    [p[1][1][3], p[1][1][1], p[1][1][2], p[1][1][0]],
                    [p[0][0][3], p[0][0][1], p[0][0][2], p[0][0][0]],
                    p[1][2],
                    p[1][3],
                    [p[1][5][3], p[1][5][1], p[1][5][2], p[1][5][0]],
                    [p[0][4][3], p[0][4][1], p[0][4][2], p[0][4][0]],
                    p[1][6],
                    p[1][7],
                ],
            ];
        },
        Ix: function (p) {
            return [
                [
                    p[0][0],
                    [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
                    [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
                    p[0][3],
                    p[0][4],
                    [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
                    [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
                    p[0][7],
                ],
                [
                    [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]],
                    p[1][1],
                    p[1][2],
                    [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
                    [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
                    p[1][5],
                    p[1][6],
                    [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]],
                ],
            ];
        },
        Iy: function (p) {
            return [
                [
                    p[0][0],
                    [p[0][2][2], p[0][2][1], p[0][2][0], p[0][2][3]],
                    [p[1][3][2], p[1][3][1], p[1][3][0], p[1][3][3]],
                    p[0][3],
                    p[0][4],
                    [p[0][6][2], p[0][6][1], p[0][6][0], p[0][6][3]],
                    [p[1][7][2], p[1][7][1], p[1][7][0], p[1][7][3]],
                    p[0][7],
                ],
                [
                    [p[0][1][2], p[0][1][1], p[0][1][0], p[0][1][3]],
                    p[1][1],
                    p[1][2],
                    [p[1][0][2], p[1][0][1], p[1][0][0], p[1][0][3]],
                    [p[0][5][2], p[0][5][1], p[0][5][0], p[0][5][3]],
                    p[1][5],
                    p[1][6],
                    [p[1][4][2], p[1][4][1], p[1][4][0], p[1][4][3]],
                ],
            ];
        },
        Iz: function (p) {
            return [
                [
                    p[0][0],
                    [p[0][5][1], p[0][5][0], p[0][5][2], p[0][5][3]],
                    [p[0][6][1], p[0][6][0], p[0][6][2], p[0][6][3]],
                    p[0][3],
                    p[0][4],
                    [p[1][4][1], p[1][4][0], p[1][4][2], p[1][4][3]],
                    [p[1][7][1], p[1][7][0], p[1][7][2], p[1][7][3]],
                    p[0][7],
                ],
                [
                    [p[0][1][1], p[0][1][0], p[0][1][2], p[0][1][3]],
                    p[1][1],
                    p[1][2],
                    [p[0][2][1], p[0][2][0], p[0][2][2], p[0][2][3]],
                    [p[1][0][1], p[1][0][0], p[1][0][2], p[1][0][3]],
                    p[1][5],
                    p[1][6],
                    [p[1][3][1], p[1][3][0], p[1][3][2], p[1][3][3]],
                ],
            ];
        },
        Ox: function (p) {
            return [
                [
                    [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]],
                    p[0][1],
                    p[0][2],
                    [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
                    [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
                    p[0][5],
                    p[0][6],
                    [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]],
                ],
                [
                    p[1][0],
                    [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
                    [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
                    p[1][3],
                    p[1][4],
                    [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
                    [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
                    p[1][7],
                ],
            ];
        },
        Oy: function (p) {
            return [
                [
                    [p[0][3][2], p[0][3][1], p[0][3][0], p[0][3][3]],
                    p[0][1],
                    p[0][2],
                    [p[1][2][2], p[1][2][1], p[1][2][0], p[1][2][3]],
                    [p[0][7][2], p[0][7][1], p[0][7][0], p[0][7][3]],
                    p[0][5],
                    p[0][6],
                    [p[1][6][2], p[1][6][1], p[1][6][0], p[1][6][3]],
                ],
                [
                    p[1][0],
                    [p[0][0][2], p[0][0][1], p[0][0][0], p[0][0][3]],
                    [p[1][1][2], p[1][1][1], p[1][1][0], p[1][1][3]],
                    p[1][3],
                    p[1][4],
                    [p[0][4][2], p[0][4][1], p[0][4][0], p[0][4][3]],
                    [p[1][5][2], p[1][5][1], p[1][5][0], p[1][5][3]],
                    p[1][7],
                ],
            ];
        },
        Oz: function (p) {
            return [
                [
                    [p[0][4][1], p[0][4][0], p[0][4][2], p[0][4][3]],
                    p[0][1],
                    p[0][2],
                    [p[0][7][1], p[0][7][0], p[0][7][2], p[0][7][3]],
                    [p[1][5][1], p[1][5][0], p[1][5][2], p[1][5][3]],
                    p[0][5],
                    p[0][6],
                    [p[1][6][1], p[1][6][0], p[1][6][2], p[1][6][3]],
                ],
                [
                    p[1][0],
                    [p[0][0][1], p[0][0][0], p[0][0][2], p[0][0][3]],
                    [p[0][3][1], p[0][3][0], p[0][3][2], p[0][3][3]],
                    p[1][3],
                    p[1][4],
                    [p[1][1][1], p[1][1][0], p[1][1][2], p[1][1][3]],
                    [p[1][2][1], p[1][2][0], p[1][2][2], p[1][2][3]],
                    p[1][7],
                ],
            ];
        },
        Lx_prime: function (p) {
            return [
                [
                    [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]],
                    [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
                    [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
                    [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
                    [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
                    [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
                    [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
                    [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]],
                ],
                p[1],
            ];
        },
        Ly_prime: function (p) {
            return [
                [
                    [p[0][1][0], p[0][1][1], p[0][1][3], p[0][1][2]],
                    [p[0][2][0], p[0][2][1], p[0][2][3], p[0][2][2]],
                    [p[0][3][0], p[0][3][1], p[0][3][3], p[0][3][2]],
                    [p[0][0][0], p[0][0][1], p[0][0][3], p[0][0][2]],
                    [p[0][5][0], p[0][5][1], p[0][5][3], p[0][5][2]],
                    [p[0][6][0], p[0][6][1], p[0][6][3], p[0][6][2]],
                    [p[0][7][0], p[0][7][1], p[0][7][3], p[0][7][2]],
                    [p[0][4][0], p[0][4][1], p[0][4][3], p[0][4][2]],
                ],
                p[1],
            ];
        },
        Lz_prime: function (p) {
            return [
                [
                    [p[0][1][0], p[0][1][3], p[0][1][2], p[0][1][1]],
                    [p[0][5][0], p[0][5][3], p[0][5][2], p[0][5][1]],
                    [p[0][6][0], p[0][6][3], p[0][6][2], p[0][6][1]],
                    [p[0][2][0], p[0][2][3], p[0][2][2], p[0][2][1]],
                    [p[0][0][0], p[0][0][3], p[0][0][2], p[0][0][1]],
                    [p[0][4][0], p[0][4][3], p[0][4][2], p[0][4][1]],
                    [p[0][7][0], p[0][7][3], p[0][7][2], p[0][7][1]],
                    [p[0][3][0], p[0][3][3], p[0][3][2], p[0][3][1]],
                ],
                p[1],
            ];
        },
        Rx_prime: function (p) {
            return [
                p[0],
                [
                    [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]],
                    [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
                    [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
                    [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
                    [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
                    [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
                    [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
                    [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]],
                ],
            ];
        },
        Ry_prime: function (p) {
            return [
                p[0],
                [
                    [p[1][1][0], p[1][1][1], p[1][1][3], p[1][1][2]],
                    [p[1][2][0], p[1][2][1], p[1][2][3], p[1][2][2]],
                    [p[1][3][0], p[1][3][1], p[1][3][3], p[1][3][2]],
                    [p[1][0][0], p[1][0][1], p[1][0][3], p[1][0][2]],
                    [p[1][5][0], p[1][5][1], p[1][5][3], p[1][5][2]],
                    [p[1][6][0], p[1][6][1], p[1][6][3], p[1][6][2]],
                    [p[1][7][0], p[1][7][1], p[1][7][3], p[1][7][2]],
                    [p[1][4][0], p[1][4][1], p[1][4][3], p[1][4][2]],
                ],
            ];
        },
        Rz_prime: function (p) {
            return [
                p[0],
                [
                    [p[1][1][0], p[1][1][3], p[1][1][2], p[1][1][1]],
                    [p[1][5][0], p[1][5][3], p[1][5][2], p[1][5][1]],
                    [p[1][6][0], p[1][6][3], p[1][6][2], p[1][6][1]],
                    [p[1][2][0], p[1][2][3], p[1][2][2], p[1][2][1]],
                    [p[1][0][0], p[1][0][3], p[1][0][2], p[1][0][1]],
                    [p[1][4][0], p[1][4][3], p[1][4][2], p[1][4][1]],
                    [p[1][7][0], p[1][7][3], p[1][7][2], p[1][7][1]],
                    [p[1][3][0], p[1][3][3], p[1][3][2], p[1][3][1]],
                ],
            ];
        },
        Ux_prime: function (p) {
            return [
                [
                    [p[0][1][0], p[0][1][1], p[0][1][3], p[0][1][2]],
                    [p[0][2][0], p[0][2][1], p[0][2][3], p[0][2][2]],
                    [p[0][3][0], p[0][3][1], p[0][3][3], p[0][3][2]],
                    [p[0][0][0], p[0][0][1], p[0][0][3], p[0][0][2]],
                    p[0][4],
                    p[0][5],
                    p[0][6],
                    p[0][7],
                ],
                [
                    [p[1][3][0], p[1][3][1], p[1][3][3], p[1][3][2]],
                    [p[1][0][0], p[1][0][1], p[1][0][3], p[1][0][2]],
                    [p[1][1][0], p[1][1][1], p[1][1][3], p[1][1][2]],
                    [p[1][2][0], p[1][2][1], p[1][2][3], p[1][2][2]],
                    p[1][4],
                    p[1][5],
                    p[1][6],
                    p[1][7],
                ],
            ];
        },
        Uy_prime: function (p) {
            return [
                [p[1][0], p[1][1], p[0][0], p[0][1], p[0][4], p[0][5], p[0][6], p[0][7]],
                [p[1][2], p[1][3], p[0][2], p[0][3], p[1][4], p[1][5], p[1][6], p[1][7]],
            ];
        },
        Uz_prime: function (p) {
            return [
                [
                    [p[1][1][3], p[1][1][1], p[1][1][2], p[1][1][0]],
                    [p[0][0][3], p[0][0][1], p[0][0][2], p[0][0][0]],
                    [p[0][3][3], p[0][3][1], p[0][3][2], p[0][3][0]],
                    [p[1][2][3], p[1][2][1], p[1][2][2], p[1][2][0]],
                    p[0][4],
                    p[0][5],
                    p[0][6],
                    p[0][7],
                ],
                [
                    [p[0][1][3], p[0][1][1], p[0][1][2], p[0][1][0]],
                    [p[1][0][3], p[1][0][1], p[1][0][2], p[1][0][0]],
                    [p[1][3][3], p[1][3][1], p[1][3][2], p[1][3][0]],
                    [p[0][2][3], p[0][2][1], p[0][2][2], p[0][2][0]],
                    p[1][4],
                    p[1][5],
                    p[1][6],
                    p[1][7],
                ],
            ];
        },
        Dx_prime: function (p) {
            return [
                [
                    p[0][0],
                    p[0][1],
                    p[0][2],
                    p[0][3],
                    [p[0][5][0], p[0][5][1], p[0][5][3], p[0][5][2]],
                    [p[0][6][0], p[0][6][1], p[0][6][3], p[0][6][2]],
                    [p[0][7][0], p[0][7][1], p[0][7][3], p[0][7][2]],
                    [p[0][4][0], p[0][4][1], p[0][4][3], p[0][4][2]],
                ],
                [
                    p[1][0],
                    p[1][1],
                    p[1][2],
                    p[1][3],
                    [p[1][7][0], p[1][7][1], p[1][7][3], p[1][7][2]],
                    [p[1][4][0], p[1][4][1], p[1][4][3], p[1][4][2]],
                    [p[1][5][0], p[1][5][1], p[1][5][3], p[1][5][2]],
                    [p[1][6][0], p[1][6][1], p[1][6][3], p[1][6][2]],
                ],
            ];
        },
        Dy_prime: function (p) {
            return [
                [p[0][0], p[0][1], p[0][2], p[0][3], p[1][4], p[1][5], p[0][4], p[0][5]],
                [p[1][0], p[1][1], p[1][2], p[1][3], p[1][6], p[1][7], p[0][6], p[0][7]],
            ];
        },
        Dz_prime: function (p) {
            return [
                [
                    p[0][0],
                    p[0][1],
                    p[0][2],
                    p[0][3],
                    [p[1][5][3], p[1][5][1], p[1][5][2], p[1][5][0]],
                    [p[0][4][3], p[0][4][1], p[0][4][2], p[0][4][0]],
                    [p[0][7][3], p[0][7][1], p[0][7][2], p[0][7][0]],
                    [p[1][6][3], p[1][6][1], p[1][6][2], p[1][6][0]],
                ],
                [
                    p[1][0],
                    p[1][1],
                    p[1][2],
                    p[1][3],
                    [p[0][5][3], p[0][5][1], p[0][5][2], p[0][5][0]],
                    [p[1][4][3], p[1][4][1], p[1][4][2], p[1][4][0]],
                    [p[1][7][3], p[1][7][1], p[1][7][2], p[1][7][0]],
                    [p[0][6][3], p[0][6][1], p[0][6][2], p[0][6][0]],
                ],
            ];
        },
        Fx_prime: function (p) {
            return [
                [
                    p[0][0],
                    p[0][1],
                    [p[0][6][0], p[0][6][3], p[0][6][2], p[0][6][1]],
                    [p[0][2][0], p[0][2][3], p[0][2][2], p[0][2][1]],
                    p[0][4],
                    p[0][5],
                    [p[0][7][0], p[0][7][3], p[0][7][2], p[0][7][1]],
                    [p[0][3][0], p[0][3][3], p[0][3][2], p[0][3][1]],
                ],
                [
                    p[1][0],
                    p[1][1],
                    [p[1][3][0], p[1][3][3], p[1][3][2], p[1][3][1]],
                    [p[1][7][0], p[1][7][3], p[1][7][2], p[1][7][1]],
                    p[1][4],
                    p[1][5],
                    [p[1][2][0], p[1][2][3], p[1][2][2], p[1][2][1]],
                    [p[1][6][0], p[1][6][3], p[1][6][2], p[1][6][1]],
                ],
            ];
        },
        Fy_prime: function (p) {
            return [
                [p[0][0], p[0][1], p[1][2], p[1][3], p[0][4], p[0][5], p[0][3], p[0][2]],
                [p[1][0], p[1][1], p[1][7], p[1][6], p[1][4], p[1][5], p[0][6], p[0][7]],
            ];
        },
        Fz_prime: function (p) {
            return [
                [
                    p[0][0],
                    p[0][1],
                    [p[0][3][3], p[0][3][1], p[0][3][2], p[0][3][0]],
                    [p[1][2][3], p[1][2][1], p[1][2][2], p[1][2][0]],
                    p[0][4],
                    p[0][5],
                    [p[0][7][3], p[0][7][1], p[0][7][2], p[0][7][0]],
                    [p[1][6][3], p[1][6][1], p[1][6][2], p[1][6][0]],
                ],
                [
                    p[1][0],
                    p[1][1],
                    [p[1][3][3], p[1][3][1], p[1][3][2], p[1][3][0]],
                    [p[0][2][3], p[0][2][1], p[0][2][2], p[0][2][0]],
                    p[1][4],
                    p[1][5],
                    [p[1][7][3], p[1][7][1], p[1][7][2], p[1][7][0]],
                    [p[0][6][3], p[0][6][1], p[0][6][2], p[0][6][0]],
                ],
            ];
        },
        Bx_prime: function (p) {
            return [
                [
                    [p[0][4][0], p[0][4][3], p[0][4][2], p[0][4][1]],
                    [p[0][0][0], p[0][0][3], p[0][0][2], p[0][0][1]],
                    p[0][2],
                    p[0][3],
                    [p[0][5][0], p[0][5][3], p[0][5][2], p[0][5][1]],
                    [p[0][1][0], p[0][1][3], p[0][1][2], p[0][1][1]],
                    p[0][6],
                    p[0][7],
                ],
                [
                    [p[1][1][0], p[1][1][3], p[1][1][2], p[1][1][1]],
                    [p[1][5][0], p[1][5][3], p[1][5][2], p[1][5][1]],
                    p[1][2],
                    p[1][3],
                    [p[1][0][0], p[1][0][3], p[1][0][2], p[1][0][1]],
                    [p[1][4][0], p[1][4][3], p[1][4][2], p[1][4][1]],
                    p[1][6],
                    p[1][7],
                ],
            ];
        },
        By_prime: function (p) {
            return [
                [p[0][5], p[0][4], p[0][2], p[0][3], p[1][4], p[1][5], p[0][6], p[0][7]],
                [p[0][0], p[0][1], p[1][2], p[1][3], p[1][1], p[1][0], p[1][6], p[1][7]],
            ];
        },
        Bz_prime: function (p) {
            return [
                [
                    [p[1][1][3], p[1][1][1], p[1][1][2], p[1][1][0]],
                    [p[0][0][3], p[0][0][1], p[0][0][2], p[0][0][0]],
                    p[0][2],
                    p[0][3],
                    [p[1][5][3], p[1][5][1], p[1][5][2], p[1][5][0]],
                    [p[0][4][3], p[0][4][1], p[0][4][2], p[0][4][0]],
                    p[0][6],
                    p[0][7],
                ],
                [
                    [p[0][1][3], p[0][1][1], p[0][1][2], p[0][1][0]],
                    [p[1][0][3], p[1][0][1], p[1][0][2], p[1][0][0]],
                    p[1][2],
                    p[1][3],
                    [p[0][5][3], p[0][5][1], p[0][5][2], p[0][5][0]],
                    [p[1][4][3], p[1][4][1], p[1][4][2], p[1][4][0]],
                    p[1][6],
                    p[1][7],
                ],
            ];
        },
        Ix_prime: function (p) {
            return [
                [
                    p[0][0],
                    [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
                    [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
                    p[0][3],
                    p[0][4],
                    [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
                    [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
                    p[0][7],
                ],
                [
                    [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]],
                    p[1][1],
                    p[1][2],
                    [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
                    [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
                    p[1][5],
                    p[1][6],
                    [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]],
                ],
            ];
        },
        Iy_prime: function (p) {
            return [
                [
                    p[0][0],
                    [p[1][0][2], p[1][0][1], p[1][0][0], p[1][0][3]],
                    [p[0][1][2], p[0][1][1], p[0][1][0], p[0][1][3]],
                    p[0][3],
                    p[0][4],
                    [p[1][4][2], p[1][4][1], p[1][4][0], p[1][4][3]],
                    [p[0][5][2], p[0][5][1], p[0][5][0], p[0][5][3]],
                    p[0][7],
                ],
                [
                    [p[1][3][2], p[1][3][1], p[1][3][0], p[1][3][3]],
                    p[1][1],
                    p[1][2],
                    [p[0][2][2], p[0][2][1], p[0][2][0], p[0][2][3]],
                    [p[1][7][2], p[1][7][1], p[1][7][0], p[1][7][3]],
                    p[1][5],
                    p[1][6],
                    [p[0][6][2], p[0][6][1], p[0][6][0], p[0][6][3]],
                ],
            ];
        },
        Iz_prime: function (p) {
            return [
                [
                    p[0][0],
                    [p[1][0][1], p[1][0][0], p[1][0][2], p[1][0][3]],
                    [p[1][3][1], p[1][3][0], p[1][3][2], p[1][3][3]],
                    p[0][3],
                    p[0][4],
                    [p[0][1][1], p[0][1][0], p[0][1][2], p[0][1][3]],
                    [p[0][2][1], p[0][2][0], p[0][2][2], p[0][2][3]],
                    p[0][7],
                ],
                [
                    [p[1][4][1], p[1][4][0], p[1][4][2], p[1][4][3]],
                    p[1][1],
                    p[1][2],
                    [p[1][7][1], p[1][7][0], p[1][7][2], p[1][7][3]],
                    [p[0][5][1], p[0][5][0], p[0][5][2], p[0][5][3]],
                    p[1][5],
                    p[1][6],
                    [p[0][6][1], p[0][6][0], p[0][6][2], p[0][6][3]],
                ],
            ];
        },
        Ox_prime: function (p) {
            return [
                [
                    [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]],
                    p[0][1],
                    p[0][2],
                    [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
                    [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
                    p[0][5],
                    p[0][6],
                    [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]],
                ],
                [
                    p[1][0],
                    [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
                    [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
                    p[1][3],
                    p[1][4],
                    [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
                    [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
                    p[1][7],
                ],
            ];
        },
        Oy_prime: function (p) {
            return [
                [
                    [p[1][1][2], p[1][1][1], p[1][1][0], p[1][1][3]],
                    p[0][1],
                    p[0][2],
                    [p[0][0][2], p[0][0][1], p[0][0][0], p[0][0][3]],
                    [p[1][5][2], p[1][5][1], p[1][5][0], p[1][5][3]],
                    p[0][5],
                    p[0][6],
                    [p[0][4][2], p[0][4][1], p[0][4][0], p[0][4][3]],
                ],
                [
                    p[1][0],
                    [p[1][2][2], p[1][2][1], p[1][2][0], p[1][2][3]],
                    [p[0][3][2], p[0][3][1], p[0][3][0], p[0][3][3]],
                    p[1][3],
                    p[1][4],
                    [p[1][6][2], p[1][6][1], p[1][6][0], p[1][6][3]],
                    [p[0][7][2], p[0][7][1], p[0][7][0], p[0][7][3]],
                    p[1][7],
                ],
            ];
        },
        Oz_prime: function (p) {
            return [
                [
                    [p[1][1][1], p[1][1][0], p[1][1][2], p[1][1][3]],
                    p[0][1],
                    p[0][2],
                    [p[1][2][1], p[1][2][0], p[1][2][2], p[1][2][3]],
                    [p[0][0][1], p[0][0][0], p[0][0][2], p[0][0][3]],
                    p[0][5],
                    p[0][6],
                    [p[0][3][1], p[0][3][0], p[0][3][2], p[0][3][3]],
                ],
                [
                    p[1][0],
                    [p[1][5][1], p[1][5][0], p[1][5][2], p[1][5][3]],
                    [p[1][6][1], p[1][6][0], p[1][6][2], p[1][6][3]],
                    p[1][3],
                    p[1][4],
                    [p[0][4][1], p[0][4][0], p[0][4][2], p[0][4][3]],
                    [p[0][7][1], p[0][7][0], p[0][7][2], p[0][7][3]],
                    p[1][7],
                ],
            ];
        },
        gyro_x: function (p) {
            return [
                [
                    [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]],
                    [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
                    [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
                    [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
                    [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
                    [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
                    [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
                    [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]],
                ],
                [
                    [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]],
                    [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
                    [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
                    [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
                    [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
                    [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
                    [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
                    [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]],
                ],
            ];
        },
        gyro_x_prime: function (p) {
            return [
                [
                    [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]],
                    [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
                    [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
                    [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
                    [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
                    [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
                    [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
                    [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]],
                ],
                [
                    [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]],
                    [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
                    [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
                    [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
                    [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
                    [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
                    [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
                    [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]],
                ],
            ];
        },
        gyro_y: function (p) {
            return [
                [
                    [p[0][3][2], p[0][3][1], p[0][3][0], p[0][3][3]],
                    [p[0][2][2], p[0][2][1], p[0][2][0], p[0][2][3]],
                    [p[1][3][2], p[1][3][1], p[1][3][0], p[1][3][3]],
                    [p[1][2][2], p[1][2][1], p[1][2][0], p[1][2][3]],
                    [p[0][7][2], p[0][7][1], p[0][7][0], p[0][7][3]],
                    [p[0][6][2], p[0][6][1], p[0][6][0], p[0][6][3]],
                    [p[1][7][2], p[1][7][1], p[1][7][0], p[1][7][3]],
                    [p[1][6][2], p[1][6][1], p[1][6][0], p[1][6][3]],
                ],
                [
                    [p[0][1][2], p[0][1][1], p[0][1][0], p[0][1][3]],
                    [p[0][0][2], p[0][0][1], p[0][0][0], p[0][0][3]],
                    [p[1][1][2], p[1][1][1], p[1][1][0], p[1][1][3]],
                    [p[1][0][2], p[1][0][1], p[1][0][0], p[1][0][3]],
                    [p[0][5][2], p[0][5][1], p[0][5][0], p[0][5][3]],
                    [p[0][4][2], p[0][4][1], p[0][4][0], p[0][4][3]],
                    [p[1][5][2], p[1][5][1], p[1][5][0], p[1][5][3]],
                    [p[1][4][2], p[1][4][1], p[1][4][0], p[1][4][3]],
                ],
            ];
        },
        gyro_y_prime: function (p) {
            return [
                [
                    [p[1][1][2], p[1][1][1], p[1][1][0], p[1][1][3]],
                    [p[1][0][2], p[1][0][1], p[1][0][0], p[1][0][3]],
                    [p[0][1][2], p[0][1][1], p[0][1][0], p[0][1][3]],
                    [p[0][0][2], p[0][0][1], p[0][0][0], p[0][0][3]],
                    [p[1][5][2], p[1][5][1], p[1][5][0], p[1][5][3]],
                    [p[1][4][2], p[1][4][1], p[1][4][0], p[1][4][3]],
                    [p[0][5][2], p[0][5][1], p[0][5][0], p[0][5][3]],
                    [p[0][4][2], p[0][4][1], p[0][4][0], p[0][4][3]],
                ],
                [
                    [p[1][3][2], p[1][3][1], p[1][3][0], p[1][3][3]],
                    [p[1][2][2], p[1][2][1], p[1][2][0], p[1][2][3]],
                    [p[0][3][2], p[0][3][1], p[0][3][0], p[0][3][3]],
                    [p[0][2][2], p[0][2][1], p[0][2][0], p[0][2][3]],
                    [p[1][7][2], p[1][7][1], p[1][7][0], p[1][7][3]],
                    [p[1][6][2], p[1][6][1], p[1][6][0], p[1][6][3]],
                    [p[0][7][2], p[0][7][1], p[0][7][0], p[0][7][3]],
                    [p[0][6][2], p[0][6][1], p[0][6][0], p[0][6][3]],
                ],
            ];
        },
        gyro_z: function (p) {
            return [
                [
                    [p[0][4][1], p[0][4][0], p[0][4][2], p[0][4][3]],
                    [p[0][5][1], p[0][5][0], p[0][5][2], p[0][5][3]],
                    [p[0][6][1], p[0][6][0], p[0][6][2], p[0][6][3]],
                    [p[0][7][1], p[0][7][0], p[0][7][2], p[0][7][3]],
                    [p[1][5][1], p[1][5][0], p[1][5][2], p[1][5][3]],
                    [p[1][4][1], p[1][4][0], p[1][4][2], p[1][4][3]],
                    [p[1][7][1], p[1][7][0], p[1][7][2], p[1][7][3]],
                    [p[1][6][1], p[1][6][0], p[1][6][2], p[1][6][3]],
                ],
                [
                    [p[0][1][1], p[0][1][0], p[0][1][2], p[0][1][3]],
                    [p[0][0][1], p[0][0][0], p[0][0][2], p[0][0][3]],
                    [p[0][3][1], p[0][3][0], p[0][3][2], p[0][3][3]],
                    [p[0][2][1], p[0][2][0], p[0][2][2], p[0][2][3]],
                    [p[1][0][1], p[1][0][0], p[1][0][2], p[1][0][3]],
                    [p[1][1][1], p[1][1][0], p[1][1][2], p[1][1][3]],
                    [p[1][2][1], p[1][2][0], p[1][2][2], p[1][2][3]],
                    [p[1][3][1], p[1][3][0], p[1][3][2], p[1][3][3]],
                ],
            ];
        },
        gyro_z_prime: function (p) {
            return [
                [
                    [p[1][1][1], p[1][1][0], p[1][1][2], p[1][1][3]],
                    [p[1][0][1], p[1][0][0], p[1][0][2], p[1][0][3]],
                    [p[1][3][1], p[1][3][0], p[1][3][2], p[1][3][3]],
                    [p[1][2][1], p[1][2][0], p[1][2][2], p[1][2][3]],
                    [p[0][0][1], p[0][0][0], p[0][0][2], p[0][0][3]],
                    [p[0][1][1], p[0][1][0], p[0][1][2], p[0][1][3]],
                    [p[0][2][1], p[0][2][0], p[0][2][2], p[0][2][3]],
                    [p[0][3][1], p[0][3][0], p[0][3][2], p[0][3][3]],
                ],
                [
                    [p[1][4][1], p[1][4][0], p[1][4][2], p[1][4][3]],
                    [p[1][5][1], p[1][5][0], p[1][5][2], p[1][5][3]],
                    [p[1][6][1], p[1][6][0], p[1][6][2], p[1][6][3]],
                    [p[1][7][1], p[1][7][0], p[1][7][2], p[1][7][3]],
                    [p[0][5][1], p[0][5][0], p[0][5][2], p[0][5][3]],
                    [p[0][4][1], p[0][4][0], p[0][4][2], p[0][4][3]],
                    [p[0][7][1], p[0][7][0], p[0][7][2], p[0][7][3]],
                    [p[0][6][1], p[0][6][0], p[0][6][2], p[0][6][3]],
                ],
            ];
        },
        LRx: function (input) {
            /* Rotates the input state of the cube around the x-axis*/
            input = [
                input[3],
                input[2],
                input[6],
                input[7],
                input[0],
                input[1],
                input[5],
                input[4]
            ];
            for (var i = 0; i < 8; i++) {
                [input[i][1], input[i][2]] = [input[i][2], input[i][1]];
            }
            return input;
        },
        LRy: function (input) {
            /* Rotates the input state of the cube around the y-axis*/
            input = [
                input[3],
                input[0],
                input[1],
                input[2],
                input[7],
                input[4],
                input[5],
                input[6]
            ];
            for (var i = 0; i < 8; i++) {
                [input[i][3], input[i][2]] = [input[i][2], input[i][3]];
            }
            return input;
        },
        LRz: function (input) {
            /* Rotates the input state of the cube around the z-axis*/
            input = [
                input[4],
                input[0],
                input[3],
                input[7],
                input[5],
                input[1],
                input[2],
                input[6]
            ];
            for (var i = 0; i < 8; i++) {
                [input[i][1], input[i][3]] = [input[i][3], input[i][1]];
            }
            return input;
        },
        Uy2: function (p) {
            return [
                [p[1][2], p[1][3], p[1][0], p[1][1], p[0][4], p[0][5], p[0][6], p[0][7]],
                [p[0][2], p[0][3], p[0][0], p[0][1], p[1][4], p[1][5], p[1][6], p[1][7]],
            ];
        },
        Dy2: function (p) {
            return [
                [p[0][0], p[0][1], p[0][2], p[0][3], p[1][6], p[1][7], p[1][4], p[1][5]],
                [p[1][0], p[1][1], p[1][2], p[1][3], p[0][6], p[0][7], p[0][4], p[0][5]],
            ];
        },
        hashtag: function (p) {
            return [
                [
                    [p[1][3][3], p[1][3][2], p[1][3][1], p[1][3][0]],
                    [p[0][2][3], p[0][2][2], p[0][2][1], p[0][2][0]],
                    [p[0][1][3], p[0][1][2], p[0][1][1], p[0][1][0]],
                    [p[1][0][3], p[1][0][2], p[1][0][1], p[1][0][0]],
                    [p[0][5][3], p[0][5][2], p[0][5][1], p[0][5][0]],
                    [p[1][4][3], p[1][4][2], p[1][4][1], p[1][4][0]],
                    [p[1][7][3], p[1][7][2], p[1][7][1], p[1][7][0]],
                    [p[0][6][3], p[0][6][2], p[0][6][1], p[0][6][0]],
                ],
                [
                    [p[0][3][3], p[0][3][2], p[0][3][1], p[0][3][0]],
                    [p[1][2][3], p[1][2][2], p[1][2][1], p[1][2][0]],
                    [p[1][1][3], p[1][1][2], p[1][1][1], p[1][1][0]],
                    [p[0][0][3], p[0][0][2], p[0][0][1], p[0][0][0]],
                    [p[1][5][3], p[1][5][2], p[1][5][1], p[1][5][0]],
                    [p[0][4][3], p[0][4][2], p[0][4][1], p[0][4][0]],
                    [p[0][7][3], p[0][7][2], p[0][7][1], p[0][7][0]],
                    [p[1][6][3], p[1][6][2], p[1][6][1], p[1][6][0]],
                ],
            ];
        },
        gyro: function (p) {
            return [
                [
                    [p[0][4][1], p[0][4][0], p[0][4][2], p[0][4][3]],
                    [p[0][5][1], p[0][5][0], p[0][5][2], p[0][5][3]],
                    [p[0][6][1], p[0][6][0], p[0][6][2], p[0][6][3]],
                    [p[0][7][1], p[0][7][0], p[0][7][2], p[0][7][3]],
                    [p[1][5][1], p[1][5][0], p[1][5][2], p[1][5][3]],
                    [p[1][4][1], p[1][4][0], p[1][4][2], p[1][4][3]],
                    [p[1][7][1], p[1][7][0], p[1][7][2], p[1][7][3]],
                    [p[1][6][1], p[1][6][0], p[1][6][2], p[1][6][3]],
                ],
                [
                    [p[0][1][1], p[0][1][0], p[0][1][2], p[0][1][3]],
                    [p[0][0][1], p[0][0][0], p[0][0][2], p[0][0][3]],
                    [p[0][3][1], p[0][3][0], p[0][3][2], p[0][3][3]],
                    [p[0][2][1], p[0][2][0], p[0][2][2], p[0][2][3]],
                    [p[1][0][1], p[1][0][0], p[1][0][2], p[1][0][3]],
                    [p[1][1][1], p[1][1][0], p[1][1][2], p[1][1][3]],
                    [p[1][2][1], p[1][2][0], p[1][2][2], p[1][2][3]],
                    [p[1][3][1], p[1][3][0], p[1][3][2], p[1][3][3]],
                ],
            ];
        },
        gyro_prime: function (p) {
            return [
                [
                    [p[1][1][1], p[1][1][0], p[1][1][2], p[1][1][3]],
                    [p[1][0][1], p[1][0][0], p[1][0][2], p[1][0][3]],
                    [p[1][3][1], p[1][3][0], p[1][3][2], p[1][3][3]],
                    [p[1][2][1], p[1][2][0], p[1][2][2], p[1][2][3]],
                    [p[0][0][1], p[0][0][0], p[0][0][2], p[0][0][3]],
                    [p[0][1][1], p[0][1][0], p[0][1][2], p[0][1][3]],
                    [p[0][2][1], p[0][2][0], p[0][2][2], p[0][2][3]],
                    [p[0][3][1], p[0][3][0], p[0][3][2], p[0][3][3]],
                ],
                [
                    [p[1][4][1], p[1][4][0], p[1][4][2], p[1][4][3]],
                    [p[1][5][1], p[1][5][0], p[1][5][2], p[1][5][3]],
                    [p[1][6][1], p[1][6][0], p[1][6][2], p[1][6][3]],
                    [p[1][7][1], p[1][7][0], p[1][7][2], p[1][7][3]],
                    [p[0][5][1], p[0][5][0], p[0][5][2], p[0][5][3]],
                    [p[0][4][1], p[0][4][0], p[0][4][2], p[0][4][3]],
                    [p[0][7][1], p[0][7][0], p[0][7][2], p[0][7][3]],
                    [p[0][6][1], p[0][6][0], p[0][6][2], p[0][6][3]],
                ],
            ];
        },
    },

};

/* 
const {
    Lx,
    Lx_prime,
    Ly,
    Ly_prime,
    Lz,
    Lz_prime,
    Rx,
    Rx_prime,
    Ry,
    Ry_prime,
    Rz,
    Rz_prime,
    Ux,
    Ux_prime,
    Uy,
    Uy_prime,
    Uz,
    Uz_prime,
    Dx,
    Dx_prime,
    Dy,
    Dy_prime,
    Dz,
    Dz_prime,
    Fx,
    Fx_prime,
    Fy,
    Fy_prime,
    Fz,
    Fz_prime,
    Bx,
    Bx_prime,
    By,
    By_prime,
    Bz,
    Bz_prime,
    Ix,
    Ix_prime,
    Iy,
    Iy_prime,
    Iz,
    Iz_prime,
    Ox,
    Ox_prime,
    Oy,
    Oy_prime,
    Oz,
    Oz_prime,
    gyro_x,
    gyro_x_prime,
    gyro_y,
    gyro_y_prime,
    gyro_z,
    gyro_z_prime,
} = melindas_physical_2x2x2x2.move;
*/